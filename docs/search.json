[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Экзамены 6",
    "section": "",
    "text": "Уровень OSI (№2), какие протоколы+порты (№5), что выполняет (№3)\n\nФазан - Физический (Physical)\nКупил - Канальный (Datalink)\nСеть - Сетевой (Network)\nТеперь - Транспортный (Transport)\nSea - Сеансовый (Session)\nПредставлен - Представительный (Presentation)\nприКЛАДным - Прикладной (Application)\n\nРЕФЕРАТ\nЦель группировки Killnet заключается в том, чтобы сделать интернет безопасным. Они находят в этом непрерывную мотивацию и считают, что это здравая и правильная позиция. Killnet круглосуточно мониторят ситуацию вокруг России, и если находится явная угроза или оскорбление, то они приступают к сетевому сканированию потенциального врага. За этим может последовать не только DDoS-атака, но и другие механизмы, позволяющие повредить сетевую инфраструктуру жертвы. Финансируют их энтузиасты и патриоты нашей страны, не имеющие никакого отношения к органам власти.\nИзначально Killnet создавалась в конце 2021 г. для коммерческих целей, но когда группировка попала в поле зрения западных СМИ и спецслужб, их регистраторы доменов стали “сносить”. На Killnet повесили ярлык пророссийской хакерской группировки, и тогда они приняли решение приостановить коммерческое применение ботнета и сконцентрировались на помощи в борьбе против Украины и стран НАТО. А после того, как хакеры из Anonymous объявили России кибервойну, Killnet взломали сайт Anonymous на целых десять дней. Российская группировка занимается хактивизмом - продвижением различных базовых ценностей (например, свободы слова или прав человека) с помощью киберпреступной деятельности.\nИзвестные атаки: дата, описание, и ущерб.\nПравительственные сайты Румынии.\nДата: 29 апреля 2022 г. по 1 мая 2022 г.\nОписание:\nПо информации румынской разведки, DDoS-атаки начались 29го мая, в 04:00 по местному времени и исходили от скомпрометированного сетевого оборудования за пределами страны (Румынии). Злоумышленники взяли под контроль рассматриваемое оборудование, используя уязвимости кибербезопасности, соответственно отсутствие мер кибербезопасности, и использовали их в качестве вектора атаки. Атаки длились несколько часов. На страницах взломанных сайтов, хакеры опубликовывали фотографию погибшего на Донбассе ребёнка и обращение к жителям Румынии, из-за поддержки данной страной Киевского режима.\nУщерб, Данные DNSC подтвердили, что целью хакеров уже стали следующие сайты:\n• gov.ro (официальный сайт правительства Румынии);\n• mapn.ro (официальный сайт Министерства обороны Румынии);\n• politiadefrontiera.ro (официальный сайт румынской пограничной полиции);\n• cfrcalatori.ro (официальный сайт Национальной железнодорожной транспортной компании Румынии);\n• otpbank.ro (сайт ОТП банка на румынском языке).\nНа официальной странице Killnet в Telegram, говорилось, что экономика Румынии после кибератак, должна была упасть на 400%. Ущерб был наненсен на 15 аэропортам, 33 СМИ ресурсам, 19 органам власти, 3 банкам, 2 платёжным системам, 910 веб-ресурсам общего использования, DNS центру, Rompetrol, военной разведке и тд.\nИсточники:\nКибератаки на сайты некоторых государственных и финансово-банковских учреждений (sri.ro)\nРоссийские хактивисты устраивают DDoS-атаки на правительственные сайты Румынии — Хакер (xakep.ru)\nhttps://t.me/killnet_reservs/900\nХакеры Killnet взломали порталы и сайты СМИ Румынии | Октагон.Медиа (octagon.media)\nСайты президента и правительства Болгарии.\nДата 15 октября 2022 года\nРоссийские хакеры в субботу, 15 октября, атаковали ряд сайтов государственных ведомств Болгарии. Из-за кибератаки доступ к пострадавшим сайтам был заблокирован или замедлен, но утечки информации или персональных данных не произошло. Главный прокурор Болгарии назвал данную атаку «нападением на болгарское государство». На пресс-конференции 15 октября Борислав Сарафов заявил, что кибератака велась из российского города Магнитогорска. Тогда он говорил, что невозможно установить, кто стоит за атакой - один хакер или группа хакеров. По его словам, Болгария, как часть европейского семейства, защищает европейские ценности, что «нормально», но также имеет последствия. В министерстве электронного управления сообщили, что работа всех официальных сайтов органов власти восстановлена.\nУщерб:\nМассированной DDoS-атаке подверглись, в частности, ресурсы болгарского президента, правительства, ключевых министерств и Конституционного суда. Также с перебоями работали страницы Конституционного суда, Минфина и Минздрава.\nКибератаки на сайты молдавских официальных органов и учреждений.\nДата: 1 мая 2022.\nРяд веб-страниц, принадлежащих государственным органам, подверглись DDoS-атакам .Атаки осуществляются за пределами Республики Молдова, сообщила Служба информации и безопасности РМ на своем официальном сайте, путем использования уязвимостей в системе безопасности и включения их в сети ботнет.\nУщерб был нанесен на государственный сайт, пограничную службу, сайт полиции, сайт железнодорожной службы и др.\nhttps://t.me/killnet_reservs/862\nМолдавия обвинила хакерскую группировку Killnet в атаке на правительство (securitylab.ru)\nАтака на портал https://servicii.fisc.md (Единый веб-ресурс для налогоплательщиков Молдавии .\nДата: 24 апреля 2022 г.\nКак уточнили хакеры, атака была проведена в последние дни сдачи налоговых и статистических отчетов за предыдущий месяц. “По факту сейчас налоговая будет в панике носиться как и налоговую сейчас быстро засыпят жалобами и звонками по самую крышу, а учитывая ситуацию, что до 25 нужно сдать все отчёты…. вобщем, в налоговой ближайшие дни будет жарко.” - говориться в Telegram-канале группировки. На странице сайта высвечивалось сообщение, что невозможно получить доступ к платформе. Главный мотив кибератаки – критика экс-министра обороны Молдавии в отношении президента России и спецоперации.\nУщерб: Из-за крупного сбоя ресурс оказался парализован.\nВеб-сайты государственных учреждений Чехии\nДата: апрель 2022 г.\nАтаки были направлены против портала чешского правительства, сайта министерства обороны, а также сайта чешского парламента. В целом, атаки Killnet на государственные веб-сайты Чехии причинили серьезный ущерб для работоспособности государственных учреждений и вызвали озабоченность в международном сообществе. Расследование этого инцидента все еще продолжается.\nУщерб от атак был довольно значительным. Например, на портале чешского правительства Killnet разместила фальшивое заявление о том, что страна отказывается от своей политики НАТО и объявляет о своем выходе из этой организации. Помимо этого, хакеры удалили или повредили значительную часть данных, связанных с работой правительства, и заблокировали доступ к некоторым функциям веб-сайта.\nАтаки также затронули сайт министерства обороны, где были скомпрометированы личные данные сотрудников, а также сайт чешского парламента, где хакеры заменили содержимое страницы на изображение козла с текстом, указывающим на то, что Killnet является ответственным за атаку.\nВеб-сайт итальянского сената.\nДата: 7 апреля 2022 года\nУтверждается, что атака проводилась в качестве протеста против новых законопроектов, которые предполагалось принять в итальянском парламенте.\nАтака привела к тому, что сайт итальянского сената был вынужден закрыться на протяжении часа. Пользователи, пытавшиеся получить доступ к сайту, видели сообщение о том, что он недоступен из-за технических проблем.\nПо словам представителей группировки Killnet, они использовали уязвимости в системе управления контентом сайта, чтобы получить доступ к базе данных и изменить содержимое страницы. Однако власти Италии заявили, что хакеры не смогли получить доступ к конфиденциальной информации, хранящейся на серверах сената.\nУщерб от кибератаки на сайт итальянского сената был незначительным, поскольку сайт был недоступен только на короткое время. Однако этот инцидент еще раз подчеркнул угрозы, связанные с кибербезопасностью государственных учреждений и показал, что даже крупные организации могут стать жертвами хакерских атак.\nСервера правительства Литвы были подвергнуты DDoS-атакам.\nДата: 27 и 28 июня 2022 года\nНесколько правительственных сайтов были временно недоступны для пользователей из-за повышенного трафика, генерируемого атакой.\nПо словам представителей Killnet, они провели кибератаку в знак протеста против действий литовского правительства по отношению к кибербезопасности и свободе слова. Однако литовские власти утверждают, что атака была направлена на ослабление работы правительства в целом.\nУщерб от атаки Killnet на сервера правительства Литвы был ограниченным, поскольку сайты были недоступны только на короткий период времени.\nАтаки на различные норвежские организации с помощью мощных DDOS-атак.\nДата: 28 июня 2022 года.\nХакерская группировка Killnet организовала DDOS-атаки на различные норвежские организации, включая национальный банк и несколько крупных медицинских центров. Атака привела к тому, что некоторые сайты были временно недоступны для пользователей из-за высокого трафика, созданного атакой.\nПредставители Killnet заявили, что они провели атаку в качестве протеста против политики правительства Норвегии в области кибербезопасности и свободы слова.\nУщерб от атаки Killnet на норвежские организации пока не был оценен, но временное отключение сайтов привело к негативным последствиям для пользователей и организаций, зависящих от этих ресурсов.\nКибератака на американскую военную компанию Lockheed Martin\nДата: 10 августа 2022г.\nГруппировка Killnet взяла на себя ответственность за кибератаку на американскую военную компанию Lockheed Martin, одного из крупнейших поставщиков военной техники и оборудования для правительства США.\nKillnet заявила, что получила доступ к конфиденциальной информации компании, включая технические характеристики и схемы производства военного оборудования. На данный момент неизвестно, сколько данных было украдено и как оно будет использовано.\nПредставители Lockheed Martin подтвердили факт кибератаки, но отказались комментировать, были ли украдены какие-либо конфиденциальные данные.\nВозможный ущерб от кибератаки на Lockheed Martin пока неизвестен, однако любые утечки конфиденциальной информации в сфере военной техники и оборудования могут иметь серьезные последствия для национальной безопасности США.\nВеб-сайт Европейского парламента\nДата: 23 ноября 2022 года\nВеб-сайт Европейского парламента был отключен после кибератаки, которую провела хакерская группировка Killnet. Атака на сайт была выполнена при помощи DDoS-атаки, которая перегрузила сервера и привела к временной недоступности сайта.\nПредставитель Европейского парламента сообщил, что атака была обнаружена немедленно, и были предприняты меры для предотвращения дальнейшего вторжения в систему. Сайт был восстановлен после некоторого времени.\nУщерб от атаки на сайт Европейского парламента все еще неизвестен.\nПрименяемые техники и тактики, согласно матрице MITTRE ATT&CK.\nГруппировка Killnet известна своим использованием различных техник и тактик в своих кибератаках. Ниже приведены некоторые из них согласно матрице MITRE ATT&CK:\nПерехват сетевого трафика (Network Sniffing): Killnet использует перехват сетевого трафика, чтобы получить доступ к конфиденциальной информации, пересылаемой через сеть. Они используют инструменты, такие как Wireshark и Tcpdump, для захвата и анализа трафика.\nЭксплойты (Exploits): Killnet использует уязвимости в программах и операционных системах, чтобы получить удаленный доступ к компьютерам и сетевым устройствам. Они могут использовать известные уязвимости или создавать собственные эксплойты.\nСоциальная инженерия (Social Engineering): Killnet использует социальную инженерию, чтобы обмануть пользователей и получить доступ к конфиденциальной информации. Например, они могут отправлять фишинговые электронные письма с вредоносными вложениями или ссылками на поддельные веб-сайты.\nDDoS-атаки (Distributed Denial of Service): Killnet использует DDoS-атаки, чтобы перегрузить серверы и привести к временной недоступности веб-сайтов и других онлайн-ресурсов. Они используют ботнеты, состоящие из зараженных компьютеров, чтобы выполнить масштабные DDoS-атаки.\nSpearphishing: Killnet использует спирофишинговые атаки, чтобы получить доступ к системам цели. Они могут отправлять фишинговые письма с вредоносными вложениями или ссылками на вредоносные сайты.\nВзлом паролей: Killnet может использовать утечки паролей или подбор паролей для взлома учетных записей и получения доступа к системам цели.\nИспользование уязвимостей: Killnet активно ищет уязвимости в системах цели и использует их для получения доступа и распространения вредоносного кода.\nРаспространение вредоносного кода: Кроме использования уязвимостей, Killnet может распространять вредоносный код через социальную инженерию, фишинг и другие методы.\nКомпрометация учетных записей: Кроме взлома паролей, Killnet может использовать другие методы, такие как перехват сеансов, чтобы получить доступ к учетным записям пользователей.\nКомпрометация облачных сервисов: Killnet может атаковать облачные сервисы, используемые целью, чтобы получить доступ к конфиденциальным данным и приложениям.\nКомпрометация сетевых устройств: Killnet может использовать уязвимости в сетевых устройствах, таких как маршрутизаторы, для получения доступа к сетям цели.\nУдаленный доступ: Killnet использует удаленные утилиты доступа, такие как TeamViewer, для получения удаленного доступа к компьютерам жертв.\nИспользование 0-day уязвимостей: Killnet может использовать 0-day уязвимости для внедрения вредоносного кода в системы, которые еще не исправлены.\nВнедрение вредоносного ПО: Killnet использует вредоносное ПО, в том числе троянские программы и рансомвар, для получения контроля над целевой системой.\nИспользование уязвимостей в ПО: Killnet ищет уязвимости в программном обеспечении и использует их для внедрения вредоносного кода или получения несанкционированного доступа.\nKillnet может комбинировать вышеперечисленные техники и тактики для достижения максимального эффекта при реализации своих киберпреступных целей.\nИнформация об используемых группировкой инструментах, программном обеспечении.\nГруппировка Killnet использует различные инструменты и программное обеспечение в своих кибератаках. Некоторые известные инструменты и ПО, используемые Killnet, включают в себя:\nCobalt Strike - инструмент для тестирования на проникновение, который может использоваться для атаки на сети, включая социальную инженерию, эксплойты уязвимостей, перехват сетевого трафика и т.д.\nMetasploit Framework - программный инструмент для тестирования на проникновение, который может использоваться для поиска и эксплуатации уязвимостей в сетях и системах.\nMimikatz - инструмент, используемый для получения доступа к учетным записям пользователей и паролям, хранящимся в памяти компьютеров и серверов.\nNmap - инструмент для сканирования сети, который может использоваться для определения уязвимостей и поиска устройств в сети.\nHydra - инструмент для брутфорса, используемый для взлома паролей и аутентификации в различных системах.\nSQLmap - инструмент для автоматизированного тестирования на уязвимости баз данных SQL, включая SQL-инъекции.\nWireshark - инструмент для анализа сетевого трафика, используемый для перехвата, анализа и мониторинга сетевого трафика.\nPowerShell Empire - инструмент, который может использоваться для создания и управления задействованными в атаках “задействованными агентами”, их использования для выполнения различных задач, таких как обход защиты, взлом учетных записей и т.д.\nAPT33 - вредоносное ПО, связанное с группировкой Killnet, которое может использоваться для шпионажа, сбора информации и кибершпионажа.\nRedXOR - вредоносное ПО, связанное с группировкой Killnet, которое используется для кибершпионажа и киберпреступлений.\nЗаметим, что это только некоторые из инструментов и программного обеспечения, используемых группировкой Killnet. В большинстве случаев, они использовались в сочетании друг с другом.\nизвестные задержания, деанонимизации и разоблачения участников группировки, а также атаки на саму группировку, если они были.\n7 августа 2022 года Газета.ru интервьюировала основателя группировки Killnet - Killmilk. Он предупредил о возможных человеческих жертвах в противостоянии пророссийских и проукраинских хакеров в кибервойне. Killmilk также объявил о планах Killnet атаковать американского производителя оружия Lockheed Martin, что может привести к гибели нескольких десятков сотрудников. Из этого интервью также стало известно о новом лидере Killnet - BlackSide.\n21 мая 2022 новостной сайт thetechoutlook.com объявил о готовящейся массированной кибератаке Anonymous Italia и других активистов на российскую хакерскую группировку Killnet. Атака запланирована на начало 21 мая в 04:00. Целью атаки, вероятно, является ослабление пророссийской группировки, которая проводила кибератаки на Украину, в ответ на них. Итальянский хакерский коллектив уже причинил значительный ущерб промосковским хакерам в прошлом.\n16 апреля 2023 года В Белоруссии был арестован администратор Telegram-канала Anonymous Russia, который является частью пророссийской хакерской сети Killnet. Об этом сообщил основатель Killnet, но подробности дела не были уточнены.\nПо словам основателя Killnet, главой Anonymous Russia является 18-летний белорусский гражданин по имени Арсений Елисеев, известный также под псевдонимом Raty. В настоящее время он находится в СИЗО-3 в городе Гомель. Основатель Killnet отметил, что Арсений является отличным парнем и патриотом, но был небрежен в своих действиях, что привело к последствиям для него и его сообщества.\nПо информации белорусской газеты “Наша Нива”, зимой господин Елисеев был объявлен в розыск местным поисковым отрядом. Согласно их данным, он вышел из дома 14 февраля и пропал на протяжении девяти дней."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "SAZNSD",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "saznsd.html",
    "href": "saznsd.html",
    "title": "Системы аутентификации и защита информации от несанкционированного доступа",
    "section": "",
    "text": "Понятие угрозы безопасности информации. Основные угрозы безопасности автоматизированной системе.\nУгроза (безопасности информации) - совокупность условий и факторов, создающих потенциальную или реально существующую опасность нарушения безопасности информации.\n\nПонятие безопасности и уязвимости информационной системы, виды уязвимостей. Безопасность информационной системы – свойство, заключающееся в способности системы обеспечить конфиденциальность, целостность и доступность информации.\nУязвимость - свойство информационной (автоматизированной) системы, обуславливающее возможность реализации угроз безопасности обрабатываемой в ней информации\n0-day - опасна, ничем не закрыть, кроме выключения порта\n1-day - решение уже вышло, но пользователь не установил обновление\n\nВиды уязвимостей информационной системы:\n1. Уязвимости веб-приложений - межсайтовый скриптинг (XSS), межсайтовое подделывание запросов (CSRF), инъекции SQL и другие.\n2. Уязвимости операционной системы - отсутствие обновлений безопасности, недостаточные права доступа, слабые пароли и другие.\n3. Уязвимости сети - открытые порты, недостаточная защита Wi-Fi, атаки на протоколы сети и другие.\n4. Уязвимости баз данных - слабые пароли, SQL-инъекции, устаревшее ПО и другие.\n5. Уязвимости приложений - недостаточная проверка входных данных, отсутствие контроля доступа, уязвимости в сторонних библиотеках и другие.\n6. Физические уязвимости - доступ к серверам и компьютерам, утеря или кража электронных носителей информации и другие.\nПонятия конфиденциальности, целостности и доступности.\nКонфиденциальность - обеспечение доступа к информации только авторизованным пользователям.\nЦелостность - обеспечение достоверности и полноты информации и методов ее обработки.\nДоступность - обеспечение доступа к информации и связанным с ней активам авторизованных пользователей по мере необходимости.\nПонятие уязвимости проектирования, примеры. Понятие эксплойта, виды эксплойтов.\nУязвимости проектирования наиболее серьезны — они обнаруживаются и уст­раняются с большим трудом. В этом случае уязвимость свойственна проекту или алгоритму и, следовательно, даже совершенная его реализация (что в принципе невозможно) не избавит от заложенной в нем слабости. Напри­мер, уязвимость стека протоколов TCP/IP. Недооценка требований по безо­пасности при создании этого стека протоколов привела к тому, что не про­ходит месяца, чтобы не было объявлено о новой уязвимости в протоколах стека TCP/IP. И раз и навсегда устранить эти недостатки уже невозможно — существуют только временные или неполные меры. Однако бывают и ис­ключения. Например, внесение в проект корпоративной сети множества модемов, облегчающих работу персонала, но существенно усложняющих работу службы безопасности. Это приводит к появлению потенциальных путей обходов межсетевого экрана, обеспечивающего защиту внутренних ресурсов от несанкционированного использования. И обнаружить, и устра­нить эту уязвимость достаточно легко.\nЭксплоиты (виды):\nRCE - удаленное выполнение кода\n\nLPE - локальное повышение привилегий\n\nSandbox Escape - результат эксплуатации уязвимостей, позволяющих из изолированной среды — песочницы — выполнить вредоносный код за ее пределами.\n\nЭксплойты — это подвид вредоносных программ. Они содержат данные или исполняемый код, способный воспользоваться одной или несколькими уязвимостями в программном обеспечении на локальном или удаленном компьютере. эксплоит.касперский\nПример: Nuclear Pack  — поражает жертв эксплойтами Java и Adobe PDF, а также подсаживает Caphaw — печально известный банковский троян .\nПонятие уязвимости реализации, примеры. Понятие эксплойта, виды эксплойтов.\nУязвимости реализации состоят в появлении ошибки на этапе реализации в программном или аппаратном обеспечении корректного с точки зрения безопасности проекта или алгоритма. Яркий пример такой уязвимости — “переполнение буфера” во многих реализациях программ, например, sendmail SENDMAIL или Internet Explorer. Обнаруживаются и устраняются подобного рода уязвимости относительно легко. Если нет исходного кода программного обеспечения, в котором обна­ружена уязвимость, то ее устранение заключается или в обновлении версии уязвимого ПО или в полной его замене или отказе от него.\n\n\nЭксплоиты (виды):\nRCE - удаленное выполнение кода\nLPE - локальное повышение привилегий\nSandbox Escape - результат эксплуатации уязвимостей, позволяющих из изолированной среды — песочницы — выполнить вредоносный код за ее пределами.\nЭксплойты — это подвид вредоносных программ. Они содержат данные или исполняемый код, способный воспользоваться одной или несколькими уязвимостями в программном обеспечении на локальном или удаленном компьютере. эксплоит.касперский\nПример: Nuclear Pack  — поражает жертв эксплойтами Java и Adobe PDF, а также подсаживает Caphaw — печально известный банковский троян .\nПонятие уязвимости конфигурации, примеры. Понятие эксплойта, виды эксплойтов.\nУязвимости конфигурации состоят в ошибках при конфигурации программного или аппаратного обеспечения. Этот вид наряду с уязвимостями реализации является самой распространенной категорией уязвимостей. Существует множество примеров таких уязвимостей. К их числу можно от­нести, например, доступный, но не используемый на узле сервис Telnet, разрешение “слабых” паролей или паролей длиной менее 6 символов, учет­ные записи и пароли, остановленные по умолчанию (например, SYSADM или DBSNMP в СУБД Oracle), и т. д. Локализовать и исправить такие уязвимости проще всего. Основная проблема — определить, является ли конфигурация уязвимой.\n\nПРИМЕР: Как сообщило агентство Росбизнесконсалтинг, 8 сентября 2000 г. компания Western Union, специализирующаяся на денежных переводах, объявила о том, что из-за “человеческого фактора” неизвестному злоумышленнику удалось скопировать информацию о кредитных карточках около 15,7 тысяч клиентов ее Web-сайта. Представитель Western Union сообщил, что взлом произошел, когда во время проведения регламентных работ были открыты системные файлы, доступ к которым во время штатной работы сайта имеют только администраторы. Western Union настаивает, что это не проблема архитектуры системы защиты, это была ошибка персонала.\n\nЭксплоиты (виды):\nRCE - удаленное выполнение кода\nLPE - локальное повышение привилегий\nSandbox Escape - результат эксплуатации уязвимостей, позволяющих из изолированной среды — песочницы — выполнить вредоносный код за ее пределами.\nЭксплойты — это подвид вредоносных программ. Они содержат данные или исполняемый код, способный воспользоваться одной или несколькими уязвимостями в программном обеспечении на локальном или удаленном компьютере. эксплоит.касперский\nПример: Nuclear Pack  — поражает жертв эксплойтами Java и Adobe PDF, а также подсаживает Caphaw — печально известный банковский троян .\nМодели внешних преднамеренных угроз информационной безопасности. Основные этапы методологии MITRE ATT&CK.\n(Mitre Att&ck (Adversarial Tactics, Techniques & Common Knowledge — «тактики, техники и общеизвестные факты о злоумышленниках») — основанная на реальных наблюдениях база знаний компании Mitre, содержащая описание тактик, приемов и методов, используемых киберпреступниками.\nReconnaissance - разведка\nResource Development\nInitial access - первоначальный доступ\nExecution - выполнение кода\nPersistence - закрепление\nPrivilege Escalation - повышение привилегий (запускаем)\nDefence Evasion - есть СЗИ, техники\nCredential Access - логины, пароли\nDiscovery - обнаружение, что в закладках сложено (Windows Active Directory, контроллер домена)\nLateral Movement - горизонтальное перемещение\nCollection - сбор информации\nCommand and control - как организовать централизованное управление агентами\nExfiltration - незаметное извлечение данных из внутренней системы организации (обмануть DLP)\nImpact - выкачивание файлов, выложить в открытый доступ\nМодели внешних преднамеренных угроз информационной безопасности. Основные этапы методологии Penetration Testing Execution Standard.\nСтандарт выполнения тестирования на проникновение (PTES) - это метод тестирования на проникновение. Он был разработан командой специалистов по информационной безопасности с целью удовлетворения потребности в полном и актуальном стандарте тестирования на проникновение. Каждый этап стандарта PTES важен сам по себе, и успех общего теста на проникновение зависит от эффективного выполнения всех этапов.\nPre-engagement Interactions (подготовка меропр.)\nIntelligence Gathering (сбор информации)\nThreat Modelling (Моделирование угроз)\nVulnerability Analysis (анализ уязвимостей)\nExploitation (эксплуатация)\nPost Exploitation (постэксплуатация)\nReporting (разработка отчетности)\nМодели внешних преднамеренных угроз информационной безопасности. Основные этапы методологии Lockheed Martin Cyber Kill Chain.\nМодель Cyber-Kill Chain указывает на то, что для осуществления своих злодеяний хакеры всегда должны пройти следующие основные этапы:\n\n\nЭтап 1. Внешняя разведка (Reconnaisance)\nЭтот этап может быть определен как фаза выбора цели, выявления особенностей организации, специфических требований в данной отрасли, выбор технологий, изучения активности компании в соцсетях или через рассылки.\nПо сути дела, хакер пытается получить ответы на такие вопросы: «Какие методы атаки будут работать с наибольшей степенью успеха?» или, например, «Какие из них будет лечге всего осуществить с точки зрения инвестиций и ресурсов?»\nЭтап 2. Вооружение и упаковка (Weaponization)\nВозможны различные формы: эксплуатация веб-приложения, стандартные или специально изготовленные вредоносные программы, уязвимости в различных документах (PDF, Office или другие форматы документов) или атаки типа watering hole. Обычно они подготавливаются с очень конкретными знаниями о цели.\nЭтап 3. Доставка (Delivery)\nПередача требуемого (вредоносного) контента либо по инициативе жертвы (например, пользователь заходит на вредоносный сайт, в результате чего передается вредоносная программ, или он открывает вредоносный PDF-файл), либо по инициативе хакера (SQL-инъекция или компрометация сетевой службы).\nЭтап 4. Заражение (Exploitation)\nПосле доставки на компьютер или устройство пользователя, требуемый (вредоносный) контент разворачивается, устанавливаясь в окружении. Как правило, это происходит при использовании известной уязвимости, для которой ранее был доступен патч. В большинстве случаев (в зависимости от цели) хакерам не требуется нести дополнительные расходы на поиск и эксплуатацию неизвестных уязвимостей.\nЭтап 5. Установка (Installation)\nЧасто установка (внедрение) происходит на фоне каких-то внешних соединений. Обычно вредоносная программа скрывается в этих операциях, незаметно проникая на конечные точки, к которым можно получить доступ. Затем хакер может контролировать это приложение без ведома жертвы.\nЭтап 6. Получение управления (Command & Control)\nНа этом этапе хакеры начинают контролировать активы жертвы с помощью таких методов управления (как правило, удаленных), как DNS, Internet Control Message Protocol (ICMP), веб-сайты и социальные сети.\nВ результате, хакер передает на контролируемые «активы» требуемые команды: что делать далее и какую информацию собирать. Используемые для сбора данных методы: снимки экрана, контроль нажатия клавиш, взлом паролей, мониторинг сети на учетные данные, сбор критического контента и документов. Часто назначается промежуточный хост, куда копируются все данные, а затем они сжимаются/шифруются для дальнейшей отправки.\nЭтап 7. Выполнение действий у жертвы (Actions on objects)\nНа финальном этапе хакер отправляет собранные данные и/или выводит из строя ИТ-активы во время своего нахождения в сети жертвы. Затем проводятся мероприятия по выявлению других целей, расширению своего присутствия внутри организации и (что самое важное) извлечению данных.\nЗатем цепочка повторяется. Вообще, особенностью Cyber-Kill Chain является то, что она круговая, а не линейная. Как только хакер проник в сеть, он снова начинает эту цепочку внутри сети, осуществляя дополнительную разведку и выполняя горизонтальное продвижение внутри Вашей сети.\nКроме того, надо иметь в виду, что хотя методология одинакова, но при нахождении внутри сети хакеры будут использовать другие методы для этапов внутренней цепочки, чем в случае, когда они находятся вне сети. Фактически, после проникновения хакера в сеть, он становится инсайдером (пользователем с определенными правами и присутствием в сети), а это мешает специалистам компании по безопасности подозревать атаку и понимать, что уже идут поздние стадии расширенной модели Cyber-Kill Chain.\nПонятие OSINT. Цели, методы, средства проведения OSINT.\nOSINT (Open Source INTelligence) — разведка по открытым источникам.\nЦель: поиск, выбор и сбор разведывательной информации из общедоступных источников, а также её анализ (Приведите обнаруженную информацию в форму, пригодную для применения).\nИнструменты: GoogleDorks, Shodan, Censys, Zoomeye\na)Google Dork или Google Dork Queries (GDQ) – набор запросов для выявления грубейших дыр в безопасности. Они содержат все то, что не спрятано от поисковых роботов.\nb)Shodan (Sentient Hyper-Optimized Data Access Network, рус. Разумная гипероптимизированная сеть доступа к данным) – поисковая система, которая позволяет найти публично доступные устройства в Интернет\nc)Censys – новый поисковик по интернету вещей (рисунок 2). Подобно Shodan, он опрашивает все публично доступные IP-адреса и протоколирует их отклики. В результате создается своеобразная карта Интернета, на которой можно искать любые устройства с сетевым интерфейсом, изучать характер распространения уязвимостей.\nПонятие поиска и анализа уязвимостей. Цели, методы и средства.\nПоиск уязвимостей - это процесс поиска и идентификации уязвимостей в компьютерных системах или приложениях\nАнализ уязвимостей - организованный процесс поиска уязвимых мест, угроз, потенциальных способов их осуществления и моделей работы злоумышленников, вовлеченных в эти процессы.\nЦели поиска уязвимостей:\n- Обнаружение потенциальных уязвимостей в системе безопасности.\n- Построение расширенной матрицы рисков с учетом уязвимостей.\n- Планирование мероприятий по предотвращению или уменьшению возможных последствий эксплуатации уязвимостей.\n- Защита от злоумышленников, которые могут использовать уязвимости.\nМетоды поиска уязвимостей:\n- Сканирование уязвимостей с помощью специальных сканеров, таких как Nessus, OpenVAS, Nikto.\n- Поиск и анализ исходного кода программного обеспечения с использованием статических анализаторов кода, таких как Coverity, SonarQube.\n- Использование специальных инструментов для аудита кода и нахождения уязвимостей, таких как Fortify, AppScan.\n- Использование техники «фаззинга» для проверки программного обеспечения на отклонения от ожидаемых входных данных.\n- Ручной поиск уязвимостей, проводимый экспертами в области безопасности.\nСредства для поиска уязвимостей:\n- Nessus, OpenVAS – сканеры уязвимостей.\n- Metasploit – фреймворк для тестирования и анализа безопасности сетевых устройств.\n- Burp Suite – набор инструментов для тестирования веб-приложений.\n- Nmap – сетевой сканер для обнаружения открытых портов и операционных систем на удаленных устройствах.\n- Wireshark – анализатор сетевых протоколов для отслеживания трафика в сети.\n- Fortify, Coverity, SonarQube – инструменты для анализа исходного кода программного обеспечения.\n- AppScan – инструмент для сканирования и анализа веб-приложений.\n- Fuzzing-инструменты, такие как Peach, AFL, для проведения техники фаззинга.\nУязвимости веб-приложений. Уязвимости OWASP Top 10.\nOpen Web Application Security Project (OWASP) – открытый проект по обеспечению безопасности приложений, все материалы которого доступны бесплатно на веб-сайте некоммерческой организации OWASP Foundation. Поставляемые материалы включают документацию, мероприятия, форумы, проекты, инструменты и видео, такие как OWASP Top 10, веб-протоколы OWASP CLASP и OWASP ZAP, а также сканер веб-приложений с открытым исходным кодом.\nВ последнем отчете OWASP перечислены 10 основных уязвимостей:\n\nИнъекции (Injections).\nНарушенная аутентификация (Broken Authentication).\nРаскрытие критически важных данных (Sensitive Data Exposure).\nВнешние объекты XML (XXE) (XML External Entities (XXE)).\nНарушенный контроль доступа (Broken Access control).\nНеправильная конфигурация безопасности (Security misconfigurations).\nМежсайтовый скриптинг (XSS) (Cross Site Scripting (XSS)).\nНебезопасная десериализация (Insecure Deserialization).\nИспользование компонентов с известными уязвимостями (Using Components with known vulnerabilities).\nНедостаточно подробные журналы и слабый мониторинг (Insufficient logging and monitoring).\n\nНазначение и основные функции TIP OpenCTI.\nTIP OpenCTI - это открытая платформа, которая предназначена для сбора, обработки, анализа и представления информации об угрозах и инцидентах в области кибербезопасности. Основными функциями TIP OpenCTI являются:\n1. Сбор и хранение информации - OpenCTI обеспечивает централизованное хранение информации об уязвимостях, инцидентах, угрозах и других аспектах кибербезопасности, которую можно использовать для анализа и принятия решений.\n2. Обработка и анализ информации - OpenCTI предоставляет средства для обработки и анализа информации, включая возможности для автоматического обнаружения угроз, определения связей между элементами данных и выявления наиболее значимых уязвимостей.\n3. Визуализация и представление - OpenCTI позволяет визуализировать и представлять информацию о кибербезопасности в удобном и наглядном виде, что облегчает процесс принятия решений.\n4. Коллаборация и обмен информацией - OpenCTI позволяет совместно работать над анализом и решением проблем в области кибербезопасности, а также обмениваться информацией и знаниями с другими пользователями.\n5. Интеграция и автоматизация - OpenCTI может быть интегрировано со многими другими системами и инструментами кибербезопасности, а также предоставляет возможности автоматизации рутинных процессов и задач.\nНазначение и основные функции Zeek.\nСбор метаинформации сетевого трафика (DNS.log, FTP.log, DHCP.log, HHTP, SSL, -файлы; сертификаты) Zeek генерирует довольно много журналов Zeek — это пассивный анализатор сетевого трафика с открытым исходным кодом. Многие операторы используют Zeek в качестве монитора сетевой безопасности (NSM) для расследования подозрительной или вредоносной активности. Zeek также поддерживает широкий спектр задач анализа трафика, выходящих за рамки безопасности, включая измерение производительности и устранение неполадок. проанализировать PCAP-файл:\nzeek -r file.pcap -C\nZeek (ранее Bro) - это программное обеспечение с открытым исходным кодом, разработанное для обработки трафика сетевых пакетов и обеспечения безопасности и мониторинга сетей. Он может использоваться для обнаружения и предотвращения кибератак, мониторинга событий в реальном времени, протоколирования и анализа сетевого трафика. Его основными функциями являются:\n1. Обнаружение и предотвращение кибератак: Zeek может обнаруживать и предотвращать различные виды кибератак, включая сканирование портов, DDoS-атаки, эксплойты и другие.\n2. Мониторинг событий в реальном времени: Zeek может мониторить сетевое соединение и проанализировать пакеты, проходящие через сеть, для обнаружения потенциальных угроз и проблем.\n3. Протоколирование и анализ трафика: Zeek может записывать и анализировать трафик для изучения действий потенциальных злоумышленников.\n4. Создание пользовательских правил: Zeek позволяет создавать собственные правила для обнаружения и предотвращения угроз.\n5. Интеграция с другими инструментами: Zeek может интегрироваться с другими инструментами безопасности, такими как SIEM, IDS и IPS для обеспечения более комплексной защиты сети.\nВстроенные средства операционной системы Linux для сбора информации о состоянии вычислительной системы.\nВерсия ядра\nuname -r\n\n4.4.0-19041-Microsoft\nВсе сведения о ядре\nuname -a\n\nLinux polyanskaya 4.4.0-19041-Microsoft #2311-Microsoft Tue Nov 08 17:09:00 PST 2022 x86_64 x86_64 x86_64 GNU/Linux\nИспользуемый дистрибутив\nlsb_release -a\n\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04 LTS\nRelease:    20.04\nCodename:   focal\nМодель процессора\ncat /proc/cpuinfo | grep \"model name\"\n\nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics         \nmodel name  : AMD Ryzen 5 5500U with Radeon Graphics\nКрайние 30 строк системных логов\ndmesg | tail -n 30\n\n[    0.136147]  Microsoft 4.4.0-19041.2311-Microsoft 4.4.35\n[    0.476016] &lt;3&gt;init: (1) ERROR: ConfigInitializeCommon:665: Failed to mount /usr/lib/wsl/drive\n[    0.476025] : 19\n[    0.476606] &lt;3&gt;init: (1) ERROR: ConfigInitializeCommon:665: Failed to mount /usr/lib/wsl/lib\n[    0.476616] 19"
  },
  {
    "objectID": "uuibias.html",
    "href": "uuibias.html",
    "title": "Угрозы и уязвимости ИБ ИАС",
    "section": "",
    "text": "Определения «система», «автоматизированная информационная система», «система передачи данных»\nСистема (греч. «целое, составленное из частей, соединение») – это множество элементов, связанных друг с другом определенными отношениями, и образующих определённую целостность, единство.\nАвтоматизированная информационная система (АИС) – это комплекс программных, технических, информационных, лингвистических, организационно-технологических средств и персонала, предназначенный для решения задач справочно-информационного обслуживания и (или) информационного обеспечения пользователей.\nСистема передачи данных (СПД) – это комплексная система, обеспечивающая обмен данными между вычислительными устройствами — компьютерами, серверами, маршрутизаторами и другим оборудованием или программным обеспечением. Оборудование СПД включает в себя маршрутизаторы, межсетевые экраны, коммутаторы, контроллеры беспроводной сети, точки доступа и другие активные устройства.\nЧто такое Модель OSI? Ее уровни\nOSI (Open Systems Interconnection) — концептуальная модель взаимодействия открытых систем, которая объединяет все коммуникационные функции вычислительных или телекоммуникационных систем. OSI демонстрирует, как компьютеры или другие типы систем коммуницируют друг с другом. Поскольку каждая система имеет свои технологические особенности и работает с разными телекоммуникационными протоколами, поставить ее в один ряд с системой с теми же характеристиками может оказаться очень сложно. Именно для этого нам и нужна модель OSI — для создания универсального стандарта связи между устройствами.\n\nOSI модель разделяет все протоколы на 7 таких уровней:\nФизический (Physical)\nКанальный (Datalink)\nСетевой (Network)\nТранспортный (Transport)\nСеансовый (Session)\nПредставительный (Presentation)\nПрикладной (Application)\n\nФункции каждого уровня модели OSI\n\n\n\nПрикладной уровень (уровень приложений; Application layer) — верхний уровень модели, обеспечивающий взаимодействие пользовательских приложений с сетью:\n\n● позволяет приложениям использовать сетевые службы:\n○ удалённый доступ к файлам и базам данных,\n○ пересылка электронной почты;\n● отвечает за передачу служебной информации;\n● предоставляет приложениям информацию об ошибках;\n● формирует запросы к уровню представления.\n6. Уровень представления (англ. Presentation layer) - Обрабатывает представление данных, обеспечивая их совместимость между различными системами.\n● Преобразует запросы и данные между форматами приложений и форматами для передачи по сети.\n● Обеспечивает сжатие/распаковку, шифрование/дешифрование данных.\n● Перенаправляет запросы другим ресурсам, если обработка локально невозможна.\n● Предоставляет промежуточный протокол для обмена информацией между различными компьютерными системами.\n● Осуществляет форматирование и преобразование кода данных.\n● Управляет структурами данных, используемыми программами.\n● Обеспечивает перевод данных из одного формата в другой.\n● Шифрует данные для защиты от несанкционированного доступа.\n● Обрабатывает сжатие текстов и преобразование графических изображений в битовые потоки для передачи по сети.\n5. Сеансовый уровень (англ. Session Layer) - Устанавливает, поддерживает и закрывает сеансы связи между приложениями на разных узлах.\n● Управляет установлением и поддержкой соединения.\n● Синхронизирует обмен данных между узлами.\n● Обеспечивает восстановление сеанса при сбоях в сети.\n4. Транспортный уровень (англ. Transport Layer) - Обеспечивает надежную доставку данных между конечными точками в сети (от отправителя к получателю). При этом уровень надёжности может варьироваться в широких пределах.\n● Разделяет большие объемы данных на меньшие пакеты.\n● Управляет потоком данных и обеспечивает контроль над надежностью передачи.\n● Обеспечивает установку и разрыв соединения между узлами.\n3. Сетевой уровень (англ. Network Layer) - предназначен для определения пути передачи данных. Отвечает за трансляцию логических адресов и имён(IP-адреса) в физические (Mac-адреса), определение наиболее эффективный путь для доставки пакетов данных, коммутацию и маршрутизацию, отслеживание неполадок и «заторов» в сети.\n● Осуществляет маршрутизацию данных.\n● Управляет сетевой адресацией.\n● Обеспечивает фрагментацию и сборку пакетов данных.\n2. Канальный уровень (англ. Data Link Layer) - предназначен для обеспечения взаимодействия между узлами в сети на физическом уровне и контроля ошибок, которые могут возникнуть.\n● Обрабатывает физические адреса устройств (MAC-адреса).\n● Управляет доступом к среде передачи данных.\n● Обнаруживает и исправляет ошибки передачи данных.\n1. Физический уровень (англ. Physical Layer) - отвечает за передачу данных (определяет метод) , представленных в виде физических сигналов по среде передачи данных, от одного устройства (компьютера) к другому.\n● Определяет электрические, оптические и механические характеристики передачи данных.\n● Кодирует и декодирует сигналы для физической передачи данных.\nРазличие модели OSI и стека протоколов TCP/IP\n\nМодель OSI была разработана как общий стандарт для сетевой коммуникации и может использоваться различными протоколами.\nДополнительно:\n\nTCP/IP - это модель клиент-сервер, т.е. Когда клиент запрашивает сервис, он предоставляется сервером. Принимая во внимание, что OSI является концептуальной моделью.\nTCP/IP - это стандартный протокол, используемый для каждой сети, включая Интернет, тогда как OSI - это не протокол, а эталонная модель, используемая для понимания и проектирования архитектуры системы.\nTCP/IP следует вертикальному подходу. С другой стороны, модель OSI поддерживает горизонтальный подход.\nTCP/IP является материальным, а OSI - нет.\nTCP/IP следует принципу «сверху вниз», а модель OSI - подходу «снизу вверх».\n\nМодель TCP/IP и модель OSI являются концептуальными моделями, используемыми для описания всех сетевых коммуникаций, в то время как TCP/IP сама по себе также является важным протоколом, используемым во всех операциях Интернета\nПримеры протоколов по каждому уровню стека протоколов TCP/IP\nСтек протоколов TCP/IP состоит из 4 уровней и включает в себя множество протоколов. Ниже приведены примеры протоколов каждого уровня стека протоколов TCP/IP:\n1. Уровень интерфейса сети (Network Interface Layer):\n- Ethernet\n- Wi-Fi\n- Bluetooth\n2. Уровень интернета (Internet Layer):\n- IP (Internet Protocol)\n- ICMP (Internet Control Message Protocol)\n- ARP (Address Resolution Protocol)\n3. Транспортный уровень (Transport Layer):\n- TCP (Transmission Control Protocol)\n- UDP (User Datagram Protocol)\n- SCTP (Stream Control Transmission Protocol)\n4. Прикладной уровень (Application Layer):\n- HTTP (Hypertext Transfer Protocol) [80]\n- FTP (File Transfer Protocol) [20, 21]\n- SMTP (Simple Mail Transfer Protocol) [25]\n- DNS (Domain Name System) [53 TCP, UDP]\nЧто такое АСУ ТП? Примеры кибератак\nАСУ ТП (автоматизированная система управления технологическими процессами) - это комплекс программно-технических средств, который предназначен для автоматизации управления технологическими процессами в различных отраслях промышленности. АСУ ТП позволяют контролировать и управлять различными параметрами производства, такими как температура, давление, скорость и др.\nПримеры кибератак на АСУ ТП:\n1. Кибератака на энергосистему Украины в 2015 году - в результате хакерской атаки были нарушены системы управления электропередачей в нескольких регионах Украины, что привело к отключению электроэнергии для более чем 200 тысяч человек.\n2. Кибератака на станцию очистки воды в США в 2016 году - хакеры получили доступ к системе управления и изменяли параметры очистки воды, что могло привести к отравлению воды в городе.\n3. Кибератака на нефтяную компанию Saudi Aramco в 2012 году - в результате атаки были уничтожены тысячи компьютеров компании, что привело к остановке работы нескольких нефтеперерабатывающих заводов.\n4. Кибератака на украинскую компанию Prykarpattyaoblenergo в 2016 году - в результате атаки были нарушены системы управления электрической подстанцией, что привело к отключению электроэнергии для более чем 80 тысяч человек.\nЧто такое информационно-аналитические системы, их функции\nпро ИАС, функции\nИнформационно-аналитические системы (ИАС) - это комплекс программно-технических средств, предназначенных для сбора, хранения, обработки и анализа информации с целью принятия решений в различных областях деятельности.\nОсновные функции ИАС:\n1. Сбор данных - ИАС позволяют автоматизировать сбор данных из различных источников, включая базы данных, сенсоры, датчики и другие устройства.\n2. Хранение данных - ИАС обеспечивают хранение данных в структурированном и организованном виде, что облегчает доступ и поиск необходимой информации.\n3. Обработка данных - ИАС позволяют обрабатывать данные с использованием различных методов, включая статистический анализ, машинное обучение и искусственный интеллект.\n4. Аналитика данных - ИАС обеспечивают анализ данных для выявления закономерностей, трендов и прогнозирования будущих событий.\n5. Визуализация данных - ИАС позволяют визуализировать данные в удобном для восприятия виде, чтобы облегчить процесс принятия решений.\n6. Интеграция данных - ИАС позволяют интегрировать данные из разных источников, чтобы получить полную картину происходящего.\n7. Автоматизация процессов - ИАС позволяют автоматизировать процессы сбора, обработки и анализа данных, что повышает эффективность работы и снижает вероятность ошибок.\nПризнаки и компоненты ИАС\nПризнаки ИАС:\n1. Автоматизация процессов - ИАС позволяет автоматизировать процессы сбора, обработки и анализа информации, что уменьшает ручную работу и повышает точность и скорость выполнения задач.\n2. Интеграция данных - ИАС позволяет интегрировать данные из различных источников, что позволяет получать полную картину происходящего.\n3. Аналитика и прогнозирование - ИАС позволяет анализировать данные и прогнозировать будущие события на основе имеющихся данных.\n4. Оперативность - ИАС позволяет быстро получать и обрабатывать данные, что позволяет принимать оперативные решения.\nКомпоненты ИАС:\n1. Сбор данных - компонент, который позволяет собирать данные из различных источников.\n2. Хранение данных - компонент, который позволяет хранить данные в структурированном и организованном виде.\n3. Обработка данных - компонент, который позволяет обрабатывать данные и проводить анализ.\n4. Аналитика и прогнозирование - компонент, который позволяет проводить аналитику и прогнозирование на основе имеющихся данных.\n5. Визуализация данных - компонент, который позволяет визуализировать данные в удобном для анализа виде.\n6. Интеграция с другими системами - компонент, который позволяет интегрировать ИАС с другими системами, такими как системы управления проектами или системы управления бизнес-процессами.\n7. Автоматизация процессов - компонент, который позволяет автоматизировать процессы сбора, обработки и анализа данных.\n\nОсновными функциями информационно-аналитической системы являются:\n• извлечение данных из различных источников, их преобразование и загрузка в хранилище;\n• хранение данных;\n• анализ данных, в том числе оперативный и интеллектуальный;\n• подготовка результатов оперативного и интеллектуального анализа для эффективного их восприятия потребителями.\nРезультатом применения средств ИАС являются, с одной стороны, регламентные аналитические отчеты, ориентированные на нужды пользователей различных категорий, с другой — средства интерактивного анализа информации и быстрого построения отчетов пользователями-непрограммистами с применением привычных понятий предметной области.\n\nЧто такое СОВ (системы обнаружения вторжений)? Классификация СОВ\nСистемы обнаружения вторжений (СОВ) - это программные или аппаратные средства, которые используются для мониторинга и обнаружения попыток несанкционированного доступа к компьютерным системам или сетям. СОВ могут использоваться для обнаружения различных типов атак, таких как вирусы, черви, троянские программы, мальварные атаки и другие.\nКлассификация СОВ может быть различной в зависимости от критериев. Ниже приведены несколько примеров классификации СОВ:\n1. По методу обнаружения:\n- СОВ на основе сигнатур - такие СОВ обнаруживают вторжения на основе заранее заданных сигнатур или шаблонов, которые соответствуют известным атакам.\n- СОВ на основе аномалий - такие СОВ обнаруживают вторжения на основе аномального поведения или необычных действий, которые не соответствуют нормальному поведению системы.\n- Гибридные СОВ - такие СОВ комбинируют методы обнаружения на основе сигнатур и аномалий.\n2. По уровню компьютерной системы или сети:\n- Сетевые СОВ - такие СОВ мониторят сетевой трафик и обнаруживают атаки на уровне сетевых протоколов.\n- Хост-ориентированные СОВ - такие СОВ мониторят активность на отдельных компьютерах или серверах.\n- Приложенные СОВ - такие СОВ мониторят активность внутри приложений и обнаруживают атаки на уровне приложений.\n3. По типу использования:\n- Реактивные СОВ - такие СОВ реагируют на обнаруженные атаки и пытаются предотвратить их или минимизировать ущерб.\n- Проактивные СОВ - такие СОВ предназначены для предотвращения атак, а не для реакции на них.\nТиповая архитектура системы обнаружения вторжений. Примеры СОВ\nТиповая архитектура системы обнаружения вторжений (СОВ) может включать следующие компоненты:\n1. Сенсоры - компоненты, которые мониторят сетевой трафик или активность на отдельных устройствах и обнаруживают потенциальные угрозы.\n2. Сервер управления - компонент, который управляет работой сенсоров, принимает и анализирует данные, генерирует предупреждения и уведомления.\n3. Хранилище данных - компонент, который хранит данные о событиях, обнаруженных сенсорами, и обеспечивает доступ к этим данным для анализа и поиска угроз.\n4. Компонент анализа - компонент, который анализирует данные, полученные от сенсоров, и ищет признаки угроз и аномального поведения.\n5. Компонент предупреждения - компонент, который генерирует предупреждения и уведомления о потенциальных угрозах и отправляет их администраторам системы безопасности.\nПримеры систем обнаружения вторжений включают:\n1. Snort - бесплатная СОВ с открытым исходным кодом, которая использует методы обнаружения на основе сигнатур.\n2. Suricata - бесплатная система обнаружения вторжений с открытым исходным кодом, которая использует методы обнаружения на основе сигнатур и аномалий.\n3. OSSEC - бесплатная и открытая СОВ на основе аномалий, которая используется для обнаружения атак на уровне хоста.\n4. McAfee Network Security Manager - коммерческая СОВ на основе сигнатур и аномалий, которая используется для обнаружения атак на сетевой уровень.\n5. IBM QRadar - коммерческая СОВ на основе аномалий, которая используется для обнаружения атак на уровне приложений и сети.\n6. Splunk Enterprise Security - коммерческая СОВ на основе аномалий, которая используется для обнаружения атак на различных уровнях системы.\nЧто такое DDP-системы (системы распределенной инфраструктуры ложных целей)? Примеры программных решений\nDDP (Decoy Deployment Platform) - это система распределенной инфраструктуры ложных целей, которая используется для обмана злоумышленников и обнаружения кибератак. Система создает ложные объекты и среды, которые имитируют настоящие, но на самом деле являются ловушками для злоумышленников.\nПримеры программных решений для создания DDP-систем:\n1. Illusive Networks - платформа, которая создает ложные цели внутри информационной системы и использует аналитику на основе искусственного интеллекта для обнаружения кибератак.\n2. Fidelis Cybersecurity - платформа, которая создает виртуальные объекты и контент, которые имитируют реальные данные и приложения, и использует их для отслеживания и обнаружения кибератак.\n\nCymmetria - платформа, которая создает ложные цели и использует аналитику на основе машинного обучения для обнаружения кибератак.\n\nЧто такое модель Cyber Kill Chain?\nМодель Cyber Kill Chain - это модель, которая описывает жизненный цикл кибератаки и состоит из семи этапов, которые злоумышленники обычно проходят в процессе проведения кибератаки:\nЭтап 1. Внешняя разведка (Reconnaisance)\nЭтот этап может быть определен как фаза выбора цели, выявления особенностей организации, специфических требований в данной отрасли, выбор технологий, изучения активности компании в соцсетях или через рассылки.\nПо сути дела, хакер пытается получить ответы на такие вопросы: «Какие методы атаки будут работать с наибольшей степенью успеха?» или, например, «Какие из них будет легче всего осуществить с точки зрения инвестиций и ресурсов?»\nЭтап 2. Вооружение и упаковка (Weaponization)\nВозможны различные формы: эксплуатация веб-приложения, стандартные или специально изготовленные вредоносные программы, уязвимости в различных документах (PDF, Office или другие форматы документов) или атаки типа watering hole. Обычно они подготавливаются с очень конкретными знаниями о цели.\nЭтап 3. Доставка (Delivery)\nПередача требуемого (вредоносного) контента либо по инициативе жертвы (например, пользователь заходит на вредоносный сайт, в результате чего передается вредоносная программ, или он открывает вредоносный PDF-файл), либо по инициативе хакера (SQL-инъекция или компрометация сетевой службы).\nЭтап 4. Заражение (Exploitation)\nПосле доставки на компьютер или устройство пользователя, требуемый (вредоносный) контент разворачивается, устанавливаясь в окружении. Как правило, это происходит при использовании известной уязвимости, для которой ранее был доступен патч. В большинстве случаев (в зависимости от цели) хакерам не требуется нести дополнительные расходы на поиск и эксплуатацию неизвестных уязвимостей.\nЭтап 5. Установка (Installation)\nЧасто установка (внедрение) происходит на фоне каких-то внешних соединений. Обычно вредоносная программа скрывается в этих операциях, незаметно проникая на конечные точки, к которым можно получить доступ. Затем хакер может контролировать это приложение без ведома жертвы.\nЭтап 6. Получение управления (Command & Control)\nНа этом этапе хакеры начинают контролировать активы жертвы с помощью таких методов управления (как правило, удаленных), как DNS, Internet Control Message Protocol (ICMP), веб-сайты и социальные сети.\nВ результате, хакер передает на контролируемые «активы» требуемые команды: что делать далее и какую информацию собирать. Используемые для сбора данных методы: снимки экрана, контроль нажатия клавиш, взлом паролей, мониторинг сети на учетные данные, сбор критического контента и документов. Часто назначается промежуточный хост, куда копируются все данные, а затем они сжимаются/шифруются для дальнейшей отправки.\nЭтап 7. Выполнение действий у жертвы (Actions on objects)\nНа финальном этапе хакер отправляет собранные данные и/или выводит из строя ИТ-активы во время своего нахождения в сети жертвы. Затем проводятся мероприятия по выявлению других целей, расширению своего присутствия внутри организации и (что самое важное) извлечению данных.\nЗатем цепочка повторяется. Вообще, особенностью Cyber-Kill Chain является то, что она круговая, а не линейная. Как только хакер проник в сеть, он снова начинает эту цепочку внутри сети, осуществляя дополнительную разведку и выполняя горизонтальное продвижение внутри Вашей сети.\nКроме того, надо иметь в виду, что хотя методология одинакова, но при нахождении внутри сети хакеры будут использовать другие методы для этапов внутренней цепочки, чем в случае, когда они находятся вне сети. Фактически, после проникновения хакера в сеть, он становится инсайдером (пользователем с определенными правами и присутствием в сети), а это мешает специалистам компании по безопасности подозревать атаку и понимать, что уже идут поздние стадии расширенной модели Cyber-Kill Chain.\nЧто такое APT-атака? Примеры целевых атак\nAPT (Advanced Persistent Threat) - это вид целевой кибератаки, направленной на длительное проникновение в систему или сеть с целью получения конфиденциальной информации или нанесения ущерба. APT-атаки характеризуются высокой степенью специализации и координации, а также использованием сложных технологий и методов, чтобы остаться незамеченными и продолжать свою деятельность в течение длительного времени.\nAPT-атаки могут быть направлены на организации различных сфер деятельности, включая правительственные учреждения, финансовые организации, крупные корпорации и другие. Некоторые примеры целевых APT-атак включают:\n1. APT28 (Fancy Bear) - группа хакеров, связанная с российскими спецслужбами, которая использовала целевые атаки для получения конфиденциальной информации у правительственных учреждений и крупных корпораций.\n2. APT10 (Red Apollo) - группа хакеров, связанная с китайскими спецслужбами, которая использовала целевые атаки для получения конфиденциальной информации у крупных корпораций и правительственных учреждений.\n3. APT41 - группа хакеров, которая занималась кибершпионажем и киберпреступлениями в интересах китайского правительства, а также заражением игровых компьютеров для получения финансовой выгоды.\n4. APT32 (OceanLotus) - группа хакеров, связанная с правительством Вьетнама, которая использовала целевые атаки для получения конфиденциальной информации у правительственных учреждений, журналистов и активистов.\nПримеры систем защиты от целенаправленных атак\n1. Системы мониторинга и анализа событий (SIEM). Эти системы собирают и анализируют данные о событиях в системе, чтобы выявлять аномалии и потенциальные угрозы. Они могут также принимать меры по автоматическому блокированию атакующих или предупреждать администраторов о возможных угрозах.\n2. Идентификация и аутентификация пользователей. Это включает в себя различные методы проверки личности пользователей (например, проверку пароля, двухфакторную аутентификацию и др.), чтобы предотвратить несанкционированный доступ к системе.\n3. Контроль доступа к данным и ресурсам. Это включает в себя ограничение доступа к чувствительным данным только для авторизованных пользователей, а также регулярное аудитирование доступа к ресурсам, чтобы обнаруживать потенциальные угрозы.\n4. Мониторинг и защита сетевого трафика. Это включает в себя различные методы защиты от атак в сети, такие как обнаружение вредоносных программ и защита от искажения данных.\n5. Антивирусная защита. Это позволяет обнаруживать и удалять вредоносное ПО на компьютерах и серверах в системе.\n6. Защита от отказа в обслуживании (DDoS). Это включает в себя защиту от атак DDoS, которые могут перегрузить компьютеры и серверы в системе, приведя к недоступности сервисов.\n7. Мониторинг и защита от внутренних угроз. Это включает в себя мониторинг действий пользователей в системе и принятие мер по предотвращению угроз со стороны злоумышленников или внутренних сотрудников.\nЧто такое NGFW?\nNGFW (Next-Generation Firewall) - это новое поколение брандмауэров, которые обеспечивают расширенные функции защиты для современных сетей. NGFW объединяет традиционные функции брандмауэра (например, контроль доступа и NAT) с расширенными возможностями защиты, такими как IPS (система предотвращения вторжений), веб-фильтрация, защита от вредоносных программ и другие функции.\nNGFW используют различные технологии, такие как анализ поведения трафика, контроль приложений и интеграцию с системами управления угрозами, чтобы обеспечить более точное обнаружение и блокирование вредоносных атак. Они также могут интегрироваться с другими системами безопасности, такими как системы управления идентификацией и доступом (IAM) и системы управления событиями и инцидентами (SIEM), для обеспечения целостной защиты сети.\nОсновная цель NGFW - это обеспечение более высокого уровня безопасности для организаций, защита от различных угроз и улучшение управляемости и видимости сетевого трафика. NGFW являются важной частью современных систем безопасности и используются для защиты критически важных ресурсов, таких как корпоративные сети, облачные сервисы и приложения.\nОрганизационная работа в сфере ИБ организации\nОрганизационная работа в области информационной безопасности (ИБ) является одной из ключевых задач для любой организации, использующей компьютерные технологии в своей деятельности. Она должна начинаться с анализа рисков и определения угроз, связанных с активами, информацией и персоналом организации.\nДалее необходимо разработать концепцию безопасности, которая будет определять основные требования и правила, необходимые для обеспечения безопасности информации в организации. В концепции должны быть определены ответственные лица и подразделения, которые будут заниматься реализацией мер по обеспечению безопасности информации.\nДля реализации одной из основных мер безопасности, а именно контроля доступа к информации, необходимо разработать специальные политики и процедуры, регулирующие доступ к информации в соответствии с требованиями информационной безопасности.\nОдним из важных направлений работы является обучение персонала организации правилам и процедурам в области информационной безопасности. Обучение должно проводиться периодически и включать в себя как обязательные правила, так и рекомендации по безопасному использованию информационных технологий.\nПомимо этого, очень важно регулярно проводить аудиты информационной безопасности для выявления уязвимостей и ошибок в системах безопасности организации. Результаты аудита позволяют корректировать политики и процедуры безопасности, а также определять дополнительные узкие места в системе защиты.\nЗаконы, регулирующие порядок работы с конфиденциальной информацией\nПринципы информационной безопасности\nПринципы информационной безопасности - это основные рекомендации и правила, которые необходимо соблюдать для обеспечения безопасности информации в организации. Они включают в себя следующие:\n1. Конфиденциальность - защита информации от несанкционированного доступа, использования и раскрытия.\n2. Целостность - защита информации от несанкционированных изменений.\n3. Доступность - обеспечение доступности информации для авторизованных пользователей в любое время.\n4. Аутентификация - проверка подлинности пользователей и устройств для обеспечения безопасного доступа к информации.\n5. Авторизация - управление правами доступа пользователей к информации в соответствии с их должностными обязанностями и требованиями безопасности.\n6. Надежность - обеспечение надежной работы системы и защиты информации от угроз.\n7. Неотказуемость - обеспечение возможности доказать факт совершения действий в системе.\n8. Согласованность - обеспечение соответствия требованиям безопасности и законодательства.\n9. Управляемость - управление рисками и угрозами информационной безопасности в организации.\n10. Обучение и осведомленность - обучение пользователей правилам безопасности и поддержание их осведомленности о текущих угрозах.\nБанковские угрозы ИБ\nУгрозы информационной безопасности для банковской сферы могут быть различными и могут включать в себя следующие:\n1. Фишинг и фишинговые атаки - злоумышленники могут отправлять электронные письма, которые могут выглядеть, как будто они отправлены от банка или другого надежного источника, с целью получения личных данных клиентов банка, таких как пароли, номера кредитных карт и другие конфиденциальные данные.\n2. Вредоносное программное обеспечение - злоумышленники могут использовать различные виды вредоносного ПО, такие как вирусы, черви, троянские программы и шпионское ПО, чтобы получить доступ к конфиденциальной информации клиентов банка.\n3. Банковские троянские программы - это специально разработанные программы, которые могут вмешиваться в банковские операции, перехватывать данные, вводимые пользователем, и отправлять их злоумышленнику.\n4. Кража и мошенничество - злоумышленники могут использовать различные методы, такие как взлом сайта банка, фишинговые атаки и другие, чтобы получить доступ к личным данным клиентов и использовать их в качестве идентификационных данных для кредитных мошенничеств и других преступлений.\n5. DDoS-атаки - злоумышленники могут использовать DDoS-атаки, чтобы перегрузить серверы банка и вызвать сбои в системах банка, что может привести к временной недоступности сайта и другим проблемам.\n6. Социальная инженерия - злоумышленники могут использовать социальную инженерию, чтобы обмануть клиентов банка и получить доступ к их личным данным.\nДля защиты от этих угроз банки могут использовать различные технологии и методы, такие как многофакторная аутентификация, шифрование данных, системы мониторинга и обнаружения вторжений, а также обучение пользователей правилам безопасности и методам защиты информации. Банки также могут сотрудничать с правительственными организациями, чтобы разработать более эффективные методы борьбы с киберпреступностью и улучшать безопасность в целом.\nЧто такое НСД? Методы доступа и основные угрозы для информации\nНСД - это сокращение от “несанкционированный доступ к информации”. Это явление, когда неавторизованные лица получают доступ к конфиденциальной информации, которая должна быть защищена. Несанкционированный доступ может иметь серьезные последствия для организации, такие как утечки данных, нарушения законодательства об информационной безопасности и юридические последствия.\nМетоды доступа к информации могут варьироваться в зависимости от уровня защиты, который установлен в организации. Некоторые из наиболее распространенных методов доступа к информации включают:\n- Фишинговые атаки, когда злоумышленники пытаются получить доступ к информации, путем маскировки под легитимные источники и обмана пользователей.\n- Атаки на пароли, когда злоумышленники пытаются угадать или взломать пароли для получения доступа к информации.\n- Внутренние угрозы, когда сотрудники организации, имеющие легальный доступ к информации, могут использовать этот доступ для злоупотреблений или утечек данных.\nОсновные угрозы для информации, связанные с НСД, включают:\n- Утечки данных - это наиболее распространенная угроза, связанная с несанкционированным доступом к информации. Это может привести к утечке личных данных клиентов, банковских данных и другой конфиденциальной информации.\n- Нарушение законодательства - несанкционированный доступ к информации может привести к нарушению законодательства об информационной безопасности, что может привести к штрафам и другим негативным последствиям для организации.\n- Ущерб репутации - утечка конфиденциальной информации может повредить репутации организации и уменьшить доверие клиентов и партнеров.\n- Юридические последствия - организации могут столкнуться с юридическими последствиями, если несанкционированный доступ к информации приведет к нарушению законодательства или ущербу для третьих лиц.\nДля защиты от НСД организации могут использовать различные методы, такие как шифрование данных, управление доступом, многофакторная аутентификация и другие методы защиты информации. Также важно обучать сотрудников организации правилам безопасности и установленным процедурам для предотвращения НСД.\nКаким образом можно организовать перехват паролей?\nМЕТОДЫ ПЕРЕХВАТА ПАРОЛЕЙ\nБрутфорс(от английского bruteforce — полный перебор или метод «грубой силы») – один из популярных методов взлома паролей на серверах и в различных программах. Заключается он в том, что программа-взломщик пытается получить доступ к какой-либо программе (например, к почтовому ящику) путем перебора паролей по критериям, заданным владельцем данной программы: по словарю, по длине, по сочетаниям цифр, да в принципе таких критериев существует множество.\nФишинг (англ. phishing, от fishing — рыбная ловля, выуживание) — вид интернет-мошенничества, целью которого является получение доступа к конфиденциальным данным пользователей — логинам и паролям. Это достигается путём проведения массовых рассылок электронных писем от имени популярных брендов, а также личных сообщений внутри различных сервисов, например, от имени банков или внутри социальных сетей. В письме часто содержится прямая ссылка на сайт, внешне неотличимый от настоящего, либо на сайт с редиректом. После того, как пользователь попадает на поддельную страницу, мошенники пытаются различными психологическими приёмами побудить пользователя ввести на поддельной странице свои логин и пароль, которые он использует для доступа к определённому сайту, что позволяет мошенникам получить доступ к аккаунтам и банковским счетам.\nСоциальная инженерия придерживается той же концепции, что и фишинг - “спросить у пользователя пароль”, но не с помощью почтового ящика, а в реальном мире.\nЛюбимый трюк социальной инженерии – позвонить в офис под видом сотрудника ИТ-безопасности и просто попросить пароль доступа к сети. Вы будете удивлены, как часто это работает. Некоторые преступники даже испытывают потребность - надеть костюм и бейдж прежде, чем придти в компанию, чтобы задать администратору в приемной тот же вопрос лицом к лицу.\nСниффер(нюхач, eng) - это программа, которая устанавливается под NIC (Сетевую Интерфейсную Карту), иначе называемую Ethernet карта(одна из необходимых частей аппаратных средств, для физического соединения компьютеров в локальной сети). Как известно информация по сети передается пакетами - от вашей машины к удаленной, так вот сниффер, установленный на промежуточном компьютере, через который будут проходить пакеты - способен захватывать их, пока они еще не достигли цели.\nКлавиатурные шпионы образуют большую категорию вредоносных программ, представляющую большую угрозу для безопасности пользователя.\nКлавиатурные шпионы - это программа для скрытной записи информации о нажимаемых пользователем клавишах.\nКак правило, современные клавиатурные шпионы не просто записывает коды вводимых клавиш - он “привязывает” клавиатурный ввод к текущему окну и элементу ввода. Кроме того, многие клавиатурные шпионы отслеживают список запущенных приложений, умеют делать “снимки” экрана по заданному расписанию или событию, шпионить за содержимым буфера обмена и решать ряд задач, нацеленных на скрытное слежение за пользователем. Записываемая информация сохраняется на диске и большинство современных клавиатурных шпионов могут формировать различные отчеты, могут передавать их по электронной почте или http/ftp протоколу. Кроме того, ряд современных клавиатурных шпионов пользуются RootKit технологиями для маскировки следов своего присутствия в системе.\nСуть угрозы информации «Маскарад»\nМАСКАРАД\nПод атакой типа “маскарад” понимается способ нападения на информационную систему (ИС), при котором злоумышленник имитирует все штатные информационные и служебные процедуры ИС, создавая у реальных пользователей и административных служб иллюзию корректного функционирования сети.\n\nПростейшим примером такой атаки может служить подделка MAC- или IP-адресов. Подделав адрес отправителя в заголовке IP-пакета, злоумышленник тем самым уже осуществляет атаку типа “маскарад”, выдавая себя за того, кто пользуется доверием у атакуемой стороны. Это дает возможность перехватить и прослушать сетевой трафик.\n\nПри всем разнообразии атак типа “маскарад” этот способ нападения может иметь три варианта реализации, которые отличаются друг от друга составом участников разыгрываемого нарушителем “спектакля”:\n\n\nнарушитель, скрываясь под маской легального пользователя (административной системы), начинает и заканчивает “игру” только с одним клиентом сети (в данном случае под клиентом сети понимается либо пользователь, либо административная система, либо прикладной или системный процесс), т. е. “маскарад один на один”;\n\nнарушитель, скрываясь под маской то одного, то другого клиента сети, начинает и заканчивает “игру” с двумя клиентами одновременно, создавая у обоих иллюзию корректного информационного взаимодействия (“маскарад с двумя”);\n\nсмешанный вариант (или “комбинированный маскарад”), при котором нарушитель начинает “диалог” с одним клиентом, а в дальнейшем к “диалогу” присоединяется другой клиент, под маской которого выступал нарушитель (комбинация “1+1”), либо наоборот, когда начинался “диалог” с двумя клиентами, завершался только с одним (комбинация “2-1”).\n\nЧто такое «незаконное использование привилегий»?\nНезаконное использование привилегий (англ. misuse of privileges) означает злоупотребление правами, полномочиями или доступом, предоставленными кому-то по должности, должностному положению или иным обстоятельствам. Например, сотрудник компании может использовать свой доступ к конфиденциальной информации для получения личной выгоды или для передачи информации третьим лицам без разрешения. Это является незаконным и может привести к уголовной, административной или дисциплинарной ответственности.\nРазновидности основных угроз ИБ в локальных размерах\n1. Вирусы и вредоносные программы: это программы, которые могут заражать компьютеры, перехватывать конфиденциальные данные пользователя.\n2. Кибератаки: это атаки на серверы, системы и приложения, которые могут привести к утечке данных, повреждению систем и нарушению бизнес-процессов.\n3. Фишинг: это вид мошенничества, при котором атакующие пытаются получить конфиденциальную информацию, такую как пароли и логины пользователей.\n4. Кража личных данных: это кража информации, которая может быть использована для того, чтобы получить доступ к чужому счету в банке.\n5. Нарушение безопасности в предприятии: это утечка информации, возможная благодаря недостаточной защите критически важных данных.\n6. Социальная инженерия: это метод атаки, когда атакующие получают доступ к конфиденциальной информации, используя обман и манипуляции.\n7. Неправомерный доступ и утечка данных: это нарушение, когда неавторизованные пользователи получают доступ к информации, которая должна быть конфиденциальной.\n8. Кража устройств: это украсть устройство, на котором есть конфиденциальная информация.\n9. Нарушение авторских прав: это нарушение закона, когда пользователи незаконно распространяют данные, которые защищены авторскими правами.\n10. Нарушение закона: это нарушение законов, которые регулируют использование ИТ-ресурсов и сервисов.\nСтепени и проявления ущерба для организации\nУщерб для организации может выражаться в различных формах и проявляться в разных степенях.\nСреди основных проявлений ущерба для организации можно выделить:\n1. Финансовые потери – непосредственный ущерб для организации, который может быть вызван различными причинами: недостаточное количество заказов, низкая прибыль, убыточность проектов, выплаты штрафов и компенсаций, необходимость проведения ремонтов и обслуживания оборудования и прочее.\n2. Репутационный ущерб – имидж организации может быть пострадал в результате негативных публикаций, скандалов, конфликтов с заказчиками или поставщиками, сложной ситуации на рынке и т.д.\n3. Убытки от потери клиентов – ущерб может быть вызван потерей доверия клиентов из-за плохого качества продукции или услуг, неправильного подхода к обслуживанию клиентов, неэффективной рекламной стратегии и т.д.\n4. Негативный влияние на работу коллектива – убытки, вызванные низкой эффективностью коллектива, неудачными проектами, конфликтами внутри организации и т.п.\n5. Возможность потери ключевых работников – ущерб может быть вызван уходом из организации опытных и квалифицированных сотрудников из-за различных причин: низкой заработной платы, отсутствия перспектив развития, некомфортных условий работы и т.п.\nПримеры актуальных внешних угроз при кибератаках на организации\n1. Фишинг: атаки на электронную почту и социальные сети, осуществляемые мошенниками для получения личной информации и финансовых средств.\n2. Малваре: вредоносные программы, которые могут захватить управление над компьютерами и сетями организаций и использовать их для кражи данных или атак на другие системы.\n3. Денежные мошенничества: киберпреступники могут использовать разные методы, включая фишинг, для получения доступа к банковским счетам или другим финансовым средствам.\n4. Атаки на доступ: хакеры могут попытаться получить доступ к защищенным сетям организаций, используя уязвимости в системах аутентификации и авторизации.\n5. Спам: массовая отправка нежелательных сообщений может приводить к отказу в обслуживании и другим проблемам для компаний.\n6. Дистрибуция вирусов: киберпреступники могут использовать вирусы и другие вредоносные программы для заражения веб-сайтов и других ресурсов, что может приводить к серьезным последствиям для организаций.\n7. Социальные атаки: киберпреступники могут использовать социальные сети и другие методы общения для получения информации о своих жертвах и использования этой информации для кибератак.\nЧто такое «аудит ИБ в организации»?\nАудит информационной безопасности (ИБ) в организации - это процесс оценки системы ИБ организации, с целью выявления уязвимостей, рисков и недостатков в системе ИБ, а также рекомендаций по улучшению. Аудит ИБ может проводиться внутренними или внешними специалистами по ИБ, которые имеют опыт и знания в области оценки системы ИБ.\nЭтапы аудита ИБ:\n1. Планирование - на этом этапе определяются цели аудита ИБ, определяется методология и выбирается команда аудиторов. Также определяются ресурсы, необходимые для проведения аудита, и составляется план работ.\n2. Сбор информации - на этом этапе проводится анализ документации и сбор информации о системе ИБ в организации. Этот этап может включать в себя ознакомление с политиками безопасности, процедурами, руководствами и другими документами, связанными с ИБ.\n3. Оценка рисков - на этом этапе проводится оценка уровня рисков в системе ИБ в организации. Это включает в себя оценку уязвимостей, возможных угроз и вероятности возникновения инцидентов.\n4. Проверка соответствия - на этом этапе аудиторы проверяют соответствие системы ИБ в организации требованиям законодательства, стандартам и рекомендациям.\n5. Тестирование - на этом этапе проводится тестирование системы ИБ в организации для выявления уязвимостей и возможных угроз. Это может включать в себя тестирование на проникновение, сканирование портов, анализ логов и другие методы.\n6. Анализ результатов - на этом этапе аудиторы анализируют полученные результаты, выявляют уязвимости и риски, и оценивают общий уровень защиты информации в организации.\n7. Подготовка отчета - на этом этапе составляется отчет об аудите ИБ, который содержит описание выявленных проблем и рекомендации по улучшению системы ИБ в организации.\n8. Проведение мероприятий по улучшению - на этом последнем этапе рекомендации, полученные в отчете, применяются в практике, проводятся мероприятия по улучшению системы ИБ в организации.\nЧто такое «программное обеспечение»? Классификация\nПрограммное обеспечение (ПО) - это совокупность программ и данных, которые обеспечивают работу компьютера или другого устройства. ПО может быть представлено в виде операционной системы, приложений, драйверов устройств, библиотек и других компонентов, которые обеспечивают работу устройства.\nПрограммное обеспечение (ПО) можно классифицировать по различным критериям. Ниже приведены несколько примеров классификации ПО:\n1. По типу задач, которые выполняет ПО:\n- Системное ПО (например, операционные системы, драйверы устройств, виртуальные машины);\n- Прикладное ПО (например, офисные приложения, браузеры, мультимедийные приложения);\n- Компоненты и библиотеки (например, библиотеки для работы с графикой, сетевыми протоколами или базами данных);\n- Инфраструктурное ПО (например, веб-сервера, базы данных, системы управления контентом).\n2. По способу распространения:\n- Проприетарное ПО (например, Microsoft Office, Adobe Photoshop, Windows);\n- Свободное и открытое ПО (например, Linux, Apache, WordPress);\n- Облачное ПО (например, Google Docs, Dropbox, Salesforce);\n- Мобильное ПО (например, приложения для Android и iOS).\n3. По типу лицензирования:\n- Проприетарное ПО с закрытым исходным кодом;\n- Проприетарное ПО с открытым исходным кодом;\n- Свободное ПО с открытым исходным кодом (например, GNU/Linux);\n- Свободное ПО с закрытым исходным кодом (например, MySQL Community Edition).\n4. По стадии жизненного цикла:\n- Новое ПО (например, бета-версии или первые релизы);\n- Устаревшее ПО (например, устаревшие версии или продукты, которые перестали поддерживаться разработчиками);\n- Легаси ПО (например, устаревшие системы или приложения, которые до сих пор используются и не могут быть заменены на новые).\nЖизненный цикл ПО\nЖизненный цикл программного обеспечения (ПО) - это процесс разработки, тестирования, внедрения и поддержки программного обеспечения. Жизненный цикл ПО включает в себя несколько этапов, которые могут варьироваться в зависимости от методологии разработки ПО и конкретного проекта. Однако, общепринятой моделью жизненного цикла ПО является следующая последовательность этапов:\n1. Планирование - на этом этапе определяются требования к ПО, определяются цели и задачи проекта, выбирается методология разработки и составляется план работ.\n2. Анализ - на этом этапе проводится анализ требований и сбор информации о проекте, формулируются функциональные и нефункциональные требования к ПО, составляется спецификация требований.\n3. Проектирование - на этом этапе происходит разработка архитектуры ПО, проектирование интерфейсов пользователя, выбор технологий и инструментов, которые будут использоваться при разработке.\n4. Разработка - на этом этапе происходит создание кода ПО, написание тестов, интеграция компонентов, отладка и тестирование ПО.\n5. Тестирование - на этом этапе проводятся тесты ПО для проверки его работоспособности и соответствия требованиям. Этот этап может включать в себя несколько видов тестирования, таких как модульное тестирование, интеграционное тестирование, системное тестирование и т.д.\n6. Внедрение - на этом этапе происходит установка и запуск ПО на целевых устройствах или серверах, настройка системы и обучение пользователей.\n7. Поддержка - на этом этапе происходит поддержка и обслуживание ПО, включая исправление ошибок, обновление и добавление новых функций, а также техническую поддержку пользователей.\nДать определения «Дефект», «Уязвимость», «Эксплойт»\nДефект - это ошибка в программном обеспечении, которая может привести к некорректной работе программы или отказу системы. Дефекты могут возникать из-за ошибок в коде, некорректной конфигурации или других причин.\nУязвимость - это слабое место в системе, которое может быть использовано злоумышленником для несанкционированного доступа к системе или данных. Уязвимости могут возникать из-за ошибок в коде, недостаточной проверки ввода или других причин.\nЭксплойт - это вредоносный код или метод, который используется злоумышленником для эксплуатации уязвимости в системе. Эксплойты могут быть использованы для получения несанкционированного доступа к системе, кражи данных или других целей.\nПримеры дефектов на этапе реализации\n1. Несоответствие требованиям: программа может быть разработана в соответствии со спецификациями, но не соответствовать ожидаемым результатам. Это может быть вызвано плохим согласованием требований между заказчиком и разработчиком или ошибками при интерпретации требований.\n2. Недостатки проектирования: дефекты проектирования, такие как неправильное использование архитектурных шаблонов, могут привести к неполадкам при реализации. Эти дефекты могут быть труднодоступны для обнаружения, поскольку они не являются прямыми ошибками в программном коде, но могут выявляться только в ходе тестирования и эксплуатации продукта.\n3. Ошибки программирования: это наиболее распространенные дефекты на этапе реализации, связанные с ошибками в коде. Они могут быть вызваны неправильным использованием переменных, недостаточной проверкой ввода или заблуждениями, связанными с конструкциями языка программирования.\n4. Недостатки контроля качества: многие дефекты могут быть связаны с отсутствием или неправильным использованием программных инструментов, используемых для контроля качества. Это могут быть ошибки в использовании систем контроля версий, отсутствие или неправильная настройка инструментов статического анализа или неправильная настройка окружения тестирования.\n\nПроблемы с загрузкой данных: в некоторых случаях на этапе реализации могут возникнуть проблемы с загрузкой данных, например, если программисты не учитывают ограничения по памяти или скорости работы программы в процессе обработки больших объемов данных. Это может вызывать проблемы с производительностью и непредсказуемым поведением программы.\n\nКлассификация уязвимостей\nУязвимости - это слабые места в системе, которые могут быть использованы злоумышленниками для несанкционированного доступа к системе или данных. Существует множество различных типов уязвимостей, и они могут быть классифицированы по различным критериям. Вот несколько примеров классификаций уязвимостей:\n1. По источнику уязвимости:\n- уязвимости программного обеспечения (например, ошибки в коде или недостаточная валидация ввода);\n- уязвимости аппаратного обеспечения (например, уязвимости в процессорах или устройствах хранения данных);\n- уязвимости сетевой инфраструктуры (например, уязвимости в маршрутизаторах или коммутаторах).\n2. По типу уязвимости:\n- уязвимости конфиденциальности (например, утечки данных или небезопасное хранение паролей);\n- уязвимости целостности (например, возможность изменения данных или программного кода);\n- уязвимости доступности (например, атаки на отказ в обслуживании или перегрузка сети).\n3. По методу эксплойта:\n- уязвимости, которые могут быть эксплуатированы через сеть (например, атаки на удаленное выполнение кода или перехват трафика);\n- уязвимости, которые могут быть эксплуатированы локально (например, атаки на физический доступ к устройству или использование обратных дверей);\n- уязвимости, которые могут быть эксплуатированы через социальную инженерию (например, фишинг или спам-атаки).\n4. По уровню абстракции:\n- уязвимости операционной системы (например, уязвимости в файловых системах или службах);\n- уязвимости приложения (например, уязвимости в веб-приложениях или мобильных приложениях);\n- уязвимости сетевого уровня (например, уязвимости в протоколах маршрутизации или протоколах безопасности).\nЧто такое OWASP?\nOWASP (Open Web Application Security Project) - это некоммерческая организация, которая занимается разработкой и распространением знаний о безопасности веб-приложений. Организация была создана в 2001 году, и в настоящее время она является международным сообществом профессионалов, занимающихся безопасностью веб-приложений.\nОсновная цель OWASP - повышение уровня безопасности веб-приложений, путем разработки стандартов, руководств и инструментов, которые помогают разработчикам создавать безопасные приложения. OWASP также проводит мероприятия, курсы обучения и конференции, чтобы обучать и распространять знания о безопасности веб-приложений.\nОдним из наиболее известных продуктов OWASP является список “OWASP Top 10”, который перечисляет наиболее распространенные уязвимости веб-приложений и является важным инструментом для разработчиков и тестировщиков. OWASP также предоставляет другие инструменты и ресурсы, такие как инструменты для тестирования на проникновение, руководства по безопасности, коды образцов и многое другое.\nКлассификация OWASP\nОрганизация OWASP (Open Web Application Security Project) разработала список из десяти наиболее распространенных уязвимостей веб-приложений, называемый “OWASP Top 10”. Этот список обновляется каждые несколько лет и представляет собой список наиболее значимых уязвимостей, которые могут быть использованы злоумышленниками для атак на веб-приложения. Вот классификация OWASP Top 10 на 2021 год:\n1. Injection - Уязвимости инъекции, такие как SQL injection, NoSQL injection, OS command injection и другие, возникают, когда злоумышленник может вводить вредоносный код в пользовательский ввод, что может привести к выполнению нежелательных действий на сервере.\n2. Broken Authentication and Session Management - Уязвимости аутентификации и управления сессиями, которые могут позволить злоумышленнику получить доступ к учетным записям пользователей или получить дополнительные права доступа.\n3. Cross-Site Scripting (XSS) - Уязвимости межсайтового скриптинга, которые позволяют злоумышленнику внедрять вредоносный код на веб-страницы, которые просматриваются другими пользователями.\n4. Broken Access Control - Уязвимости контроля доступа, которые позволяют злоумышленнику получить доступ к функциям или ресурсам, на которые у него нет прав.\n5. Security Misconfiguration - Уязвимости конфигурации безопасности, которые возникают, когда система настроена с небезопасными параметрами или настройки безопасности не были применены должным образом.\n6. Insecure Cryptographic Storage - Уязвимости хранения криптографических ключей и паролей, которые могут быть украдены злоумышленником и использованы для несанкционированного доступа к системе.\n7. Insufficient Logging and Monitoring - Недостаточное ведение журналов и мониторинг, которые могут помочь злоумышленнику скрыть свои действия или замаскировать атаку.\n8. Insecure Communication - Небезопасная передача данных, которая может быть перехвачена злоумышленником и использована для несанкционированного доступа к системе.\n9. Using Components with Known Vulnerabilities - Использование компонентов с известными уязвимостями, которые могут быть использованы злоумышленником для атаки на систему.\n10. Server-Side Request Forgery (SSRF) - Уязвимости подделки запросов на стороне сервера, которые могут позволить злоумышленнику получить доступ к внутренним системам или другим веб-приложениям на сервере.\nЧто такое «внедрение SQL-кода»? Пример\n«Внедрение SQL-кода» - это метод атаки на базы данных, при котором злоумышленник вводит SQL-код в веб-форму или URL-адрес, чтобы получить несанкционированный доступ к базе данных и украсть, изменить или удалить данные.\nНапример, если у вас есть веб-страница с формой для ввода имени пользователя и пароля, злоумышленник может ввести следующий SQL-код в поле «имя пользователя», чтобы получить полный доступ к базе данных:\n’ OR 1=1; --\nЭтот код указывает базе данных на то, что любое значение, которое введет злоумышленник в поле “имя пользователя”, должно быть расценено как истинное (1=1) и должно быть выполнено любое последующее действие. Двойной дефис - это комментарий, который говорит базе данных игнорировать все, что идет после него.\nТаким образом, злоумышленник может получить доступ к любым данным в базе данных, в том числе к приватным данным о пользователях, финансовой информации и другим конфиденциальным данным.\nЧто такое CVE? Какие базы Вы знаете?\nCVE (Common Vulnerabilities and Exposures) - это стандартная нумерация уязвимостей в компьютерных системах и программном обеспечении. Каждая уязвимость получает свой уникальный номер в формате CVE-YYYY-NNNN.\nНекоторые из известных баз данных CVE:\n1. CVE (https://cve.mitre.org) - база данных уязвимостей ведется организацией MITRE.\n2. NVD (https://nvd.nist.gov) - база данных уязвимостей, поддерживаемая Национальным институтом стандартов и технологии США.\n3. OSVDB (http://www.osvdb.org) - открытая база данных уязвимостей.\n4. Exploit-DB (https://www.exploit-db.com) - база данных уязвимостей, содержащая эксплойты для них.\n5. VulDB (https://vuldb.com) - база данных уязвимостей, содержащая информацию о критичности уязвимости, их воздействии на систему и прочем.\n6. CERT (https://www.cert.org) - центр компьютерной безопасности, поддерживающий базу данных уязвимостей.\nОсновные векторы атак, используемые злоумышленниками\n1. Фишинг – это атака, при которой злоумышленник пытается получить доступ к личной информации пользователя (логины, пароли, номера кредитных карт) путем отправки фальшивых сообщений, имитирующих официальные запросы.\n2. Маливертисинг – это атака, при которой злоумышленник закладывает вредоносный код в рекламные баннеры или другие рекламные материалы, которые затем могут заразить компьютеры пользователей.\n3. Вредоносные вложения – это атака, при которой злоумышленник использует электронную почту для отправки вредоносных вложений, которые могут заразить компьютеры пользователей.\n4. DDoS – это атака, при которой злоумышленник использует большое количество компьютеров (ботнет) для создания нагрузки на сервер или сеть, что делает их недоступными.\n5. Вирусы и трояны – это атака, при которой злоумышленник использует вирусы и трояны для заражения компьютеров пользователей и получения доступа к их личной информации.\n6. Инженерная атака – это атака, при которой злоумышленник использует социальную инженерию для получения доступа к личной информации пользователя с помощью манипуляции его психологическим состоянием.\nМетоды поиска уязвимостей\nСуществует множество методов поиска уязвимостей, которые могут быть использованы для проверки безопасности информационных систем. Вот несколько примеров:\n1. Сканирование портов - это метод, который позволяет проверить открытые порты на удаленном устройстве и обнаружить потенциальные уязвимости. Сканирование портов может быть выполнено с помощью специализированных инструментов, таких как Nmap, Masscan и других.\n2. Анализ уязвимостей - это метод, который позволяет проверить систему на наличие известных уязвимостей, используя базы данных уязвимостей. Анализ уязвимостей может быть выполнен с помощью специализированных инструментов, таких как Nessus, OpenVAS, Qualys и других.\n3. Тестирование на проникновение - это метод, который позволяет проверить систему на возможность проникновения в нее. Тестирование на проникновение может быть выполнено с помощью специализированных инструментов, таких как Metasploit, Core Impact и других.\n4. Анализ кода - это метод, который позволяет обнаружить уязвимости в коде программного обеспечения. Анализ кода может быть выполнен с помощью специализированных инструментов, таких как Checkmarx, Fortify и других.\n5. Социальная инженерия - это метод, который позволяет проверить систему на уязвимости, связанные с поведением пользователей и их недостаточной осведомленностью в области безопасности. Социальная инженерия может быть выполнена с помощью различных методов, таких как фишинг, внедрение шпионского ПО и других.\n6. Анализ безопасности веб-приложений - это метод, который позволяет проверить безопасность веб-приложений на наличие уязвимостей, таких как SQL-инъекции, XSS-атаки и другие. Анализ безопасности веб-приложений может быть выполнен с помощью специализированных инструментов, таких как Acunetix, Burp Suite, OWASP ZAP и других.\nЧто такое Metasploit Framework?\nMetasploit Framework - это инструмент для тестирования на проникновение, который позволяет исследователям безопасности и преступникам использовать известные уязвимости в системах для выполнения атаки на целевые компьютерные системы. Это мощный фреймворк, состоящий из большого количества модулей, которые используются для поиска уязвимостей в различных программах и операционных системах. Он позволяет исследователям безопасности и администраторам тестировать уязвимости системы, чтобы обеспечить более безопасную среду компьютерных систем.\nПримеры использования Metasploit Framework\n1. Оценка безопасности: Metasploit Framework может использоваться для оценки безопасности сетей и систем. Он может использоваться для сканирования уязвимостей и попыток эксплойтов на обнаруженные уязвимости.\n2. Проведение тестов на проникновение: Metasploit Framework может использоваться для проведения тестов на проникновение. Это позволяет оценить способность вашей сети выдерживать атаки.\n3. Разработка эксплойтов: Metasploit Framework может использоваться для разработки собственных эксплойтов для выявления уязвимостей в сети или для обхода существующих систем защиты.\n4. Обратный метинг: Metasploit Framework может использоваться для создания обратного соединения с удаленным компьютером, что позволяет получить удаленный доступ и управление удаленным устройством.\n5. Исследование уязвимостей: Metasploit Framework может использоваться для исследования уязвимостей в сети. Он может быть использован для поиска дыр в безопасности сетевых устройств, таких как маршрутизаторы, коммутаторы и многие другие.\n6. Развертывание Коддингтона: Metasploit Framework может быть использован для автоматизации развертывания Коддингтона, что позволяет организации устанавливать тестовое окружение для проверки безопасности.\n7. Взлом паролей: Metasploit Framework может быть использован для взлома паролей в целях тестирования безопасности. Он может использоваться для проверки сложности паролей и возможности их взлома.\nСтатьи УК РФ в сфере компьютерных преступлений\nСтатьи УК РФ в сфере компьютерных преступлений регулируют уголовную ответственность за нарушения в сфере информационных технологий. В настоящее время эта сфера является одной из наиболее актуальных и важных для обеспечения информационной безопасности.\nСтатья 272 УК РФ «Незаконный доступ к компьютерной информации» регулирует уголовное наказание за получение несанкционированного доступа к компьютерной информации. В случае, если такой доступ был получен с целью причинения вреда или получения выгоды, уголовная ответственность может быть усилена.\nСтатья 273 УК РФ «Создание, использование и распространение вредоносных программ для компьютеров и баз данных» устанавливает уголовную ответственность за создание, использование или распространение вирусов и других вредоносных программ.\nСтатья 273.1 УК РФ «Неправомерный доступ к защищаемой информации» устанавливает уголовную ответственность за неправомерный доступ к защищаемой информации, а также за ее получение, использование или распространение.\nСтатья 274 УК РФ «Нарушение авторских и смежных прав» устанавливает уголовную ответственность за нарушение авторских и смежных прав при использовании и распространении компьютерной информации.\nСтатья 275 УК РФ «Создание, использование и распространение поддельных документов, электронных и других данных» устанавливает уголовную ответственность за создание, использование и распространение поддельных документов, электронных и других данных.\nСтатья 276 УК РФ «Хищение компьютерной или иной электронной информации» устанавливает уголовную ответственность за хищение компьютерной или иной электронной информации, а также за ее использование или распространение.\nЧто такое тестирование на проникновение? Основные виды\nТестирование на проникновение (Penetration Testing) - это процесс проверки безопасности компьютерной системы или сети путем моделирования реальной атаки на систему. Целью тестирования на проникновение является обнаружение уязвимостей и слабых мест в системе, которые могут быть использованы злоумышленниками для несанкционированного доступа или кражи данных.\nОсновные виды тестирования на проникновение включают:\n1. Черный ящик (Black Box) - в этом виде тестирования на проникновение тестер не имеет заранее предоставленной информации о системе или сети, которую он тестирует. Тестер должен самостоятельно собирать информацию о системе и использовать ее для обнаружения уязвимостей.\n2. Белый ящик (White Box) - в этом виде тестирования на проникновение тестер имеет полный доступ к коду и архитектуре системы. Это позволяет ему более глубоко анализировать систему и обнаруживать уязвимости, которые могут быть недоступны при тестировании черного ящика.\n3. Серый ящик (Gray Box) - в этом виде тестирования на проникновение тестер имеет ограниченный доступ к информации о системе или сети, которую он тестирует. Тестер может иметь доступ к некоторым сведениям о системе, таким как ее IP-адрес или список установленных программ, но не имеет полного доступа к коду и архитектуре системы.\nПримеры международных методологий тестирования\n1. OSSTMM (Open Source Security Testing Methodology Manual) - это методология, которая описывает широкий спектр тестов на безопасность, включая тестирование физической безопасности, анализ уязвимостей, тестирование социальной инженерии, тестирование на проникновение и многие другие.\n2. PTES (Penetration Testing Execution Standard) - это методология, которая описывает процесс пентеста от начала до конца, включая планирование, сбор информации, анализ уязвимостей, эксплуатацию, устранение проблем и документирование результатов.\n3. NIST SP 800-115 - это руководство по тестированию на проникновение, разработанное Национальным институтом стандартов и технологий (NIST) США. Оно описывает процесс тестирования на проникновение, включая планирование, сбор информации, анализ уязвимостей, эксплуатацию и документирование результатов.\n4. ISSAF (Information Systems Security Assessment Framework) - это методология, которая описывает процесс тестирования на проникновение, включая планирование, сбор информации, анализ уязвимостей, эксплуатацию и документирование результатов. Она также включает в себя рекомендации по управлению рисками и защите информации.\n5. OWASP (Open Web Application Security Project) - это проект, который разрабатывает методологии и инструменты для тестирования безопасности веб-приложений. Он включает в себя руководства по тестированию на проникновение, анализу уязвимостей и защите веб-приложений.\nПримеры дистрибутивов для пентеста\nСуществует множество дистрибутивов для пентеста, и выбор зависит от потребностей и предпочтений пользователей. Вот несколько примеров из этой категории:\n1. Kali Linux - это наиболее популярный дистрибутив для пентеста, который основан на Debian. Он включает в себя множество инструментов для тестирования на проникновение, а также мощный набор инструментов для обнаружения уязвимостей, эксплуатации и управления безопасностью.\n2. Parrot Security OS - это другой дистрибутив для пентеста, который также основан на Debian. Он включает в себя множество инструментов для тестирования на проникновение, а также инструменты для шифрования, анонимности и защиты данных.\n3. BlackArch - это дистрибутив, который предназначен для тестирования на проникновение и содержит более 2000 инструментов для этой цели. Он основан на Arch Linux и предоставляет множество инструментов для анализа уязвимостей, эксплуатации и тестирования безопасности.\n4. Pentoo - это дистрибутив, который также предназначен для тестирования на проникновение и основан на Gentoo. Он включает в себя множество инструментов для анализа уязвимостей, эксплуатации и тестирования безопасности, а также содержит настройки ядра, которые могут повысить производительность при выполнении задач с высокой нагрузкой на процессор.\n5. Samurai Web Testing Framework - это дистрибутив, который предназначен для тестирования безопасности веб-приложений. Он основан на Ubuntu и включает в себя множество инструментов для сканирования, анализа и эксплуатации уязвимостей веб-приложений.\nЧто такое Nmap? Примеры команд\n”network mapper” - это утилита с открытым исходным кодом для исследования сети, проверки безопасности, контролирования структуры сети, управления расписаниями запуска служб и учета времени работы хоста или службы\nnmap -p 80,22,139 linuxhint.comнесколько портов ч\\з запятую\nnmap –open 172.31.1.* все открытые порты в даном диапазоне\nnmap -iL ourhostlist просканировать список хостов\n\nnmap Опции_сканирования Цель_сканирования\nВыходные данные Nmap это список просканированных целей с дополнительной информацией по каждой из них в зависимости от заданных опций. Ключевой информацией является «таблица важных портов». Эта таблица содержит номер порта, протокол, имя службы и состояние. Состояние может иметь значение open (открыт), filtered (фильтруется), closed (закрыт) или unfiltered (не фильтруется). Открыт означает, что приложение на целевой машине готово для установки соединения/принятия пакетов на этот порт. Фильтруется означает, что брандмауэр, сетевой фильтр, или какая-то другая помеха в сети блокирует порт, и Nmap не может установить открыт этот порт или закрыт. Закрытые порты не связаны ни с каким приложением, но могут быть открыты в любой момент. Порты расцениваются как не фильтрованные, когда они отвечают на запросы Nmap, но Nmap не может определить открыты они или закрыты. Nmap выдает комбинации открыт|фильтруется и закрыт|фильтруется, когда не может определить, какое из этих двух состояний описывает порт. Эта таблица также может предоставлять детали о версии программного обеспечения, если это было запрошено. Когда осуществляется сканирование по IP протоколу (-sO), Nmap предоставляет информацию о поддерживаемых протоколах, а не об открытых портах.\nВ дополнение к таблице важных портов Nmap может предоставлять дальнейшую информацию о целях: преобразованные DNS имена, предположение об используемой операционной системе, типы устройств и MAC адреса.\nТипичное сканирование с использованием Nmap показано в Пример 1. Единственные аргументы, использованные в этом примере - это -A, для определения версии ОС, сканирования с использованием скриптов и трассировки; -T4 для более быстрого выполнения; затем два целевых хоста.\n\nНазовите протоколы, работающие на портах: 21, 22, 23, 25, 53, 69, 80, 110, 443\nВСЕ ПОРТЫ\n21/TCP FTP — для передачи команд FTP\n22/TCP,UDP SSH (Secure SHell) — криптографический сетевой протокол для безопасной передачи данных\n23/TCP,UDP Telnet — применяется для передачи текстовых сообщений в незашифрованном виде\n25/TCP,UDP SMTP (Simple Mail Transfer Protocol) — применяется для пересылки почтовых сообщений в виде незашифрованного текста\n53/TCP,UDP DOMAIN (Domain Name System, DNS)\n69/TCP,UDP TFTP (Trivial File Transfer Protocol) — тривиальный FTP применяется, например, при установке операционной системы на большое количество компьютеров в сетях предприятий. Для этого сервер TFTP и поддержка удалённого развёртывания (UAM) включены в состав серверных ОС Windows NT4 Server и новее\n80/TCP,UDP HTTP (HyperText Transfer Protocol); ранее — WWW\n110/TCP,UDP POP3 (Post Office Protocol Version 3)\n443/TCP,UDP HTTPS (HyperText Transfer Protocol Secure) — HTTP с шифрованием по SSL или TLS\nПредназначение утилиты Network Miner\nNetwork Miner - это инструмент для сбора информации о сетевой активности и анализа трафика. Он предназначен для использования в целях тестирования на проникновение, мониторинга безопасности сети и анализа протоколов.\nНекоторые из основных функций Network Miner включают:\n1. Анализ трафика - Network Miner может анализировать сетевой трафик, основываясь на протоколах, источниках и назначениях, а также на других параметрах.\n2. Сбор данных - Network Miner может собирать данные, такие как пользовательские агенты, заголовки HTTP-запросов и другие параметры.\n3. Извлечение файлов - Network Miner может извлекать файлы из сетевого трафика, включая изображения, аудио и другие файлы.\n4. Анализ протоколов - Network Miner может анализировать различные протоколы, такие как HTTP, SMTP, POP3, FTP, DNS и другие.\n5. Поиск уязвимостей - Network Miner может использоваться для поиска уязвимостей и других проблем в сетевой активности.\n6. Мониторинг активности - Network Miner может использоваться для мониторинга активности на сети, включая обнаружение новых устройств и анализ сетевой активности.\n7. Графический интерфейс - Network Miner имеет графический интерфейс, который позволяет легко просматривать данные и анализировать сетевую активность.\nЧто такое MASSCAN?\nMASSCAN\nMASSCAN — это массовый сканер IP портов, который хорошо подходит для сканирования большого диапазона IP-адресов и портов.\nMasscan быстрее, чем nmap\nmasscan \\&lt;ip адрес/диапазон\\&gt; -p порты опции\nУвеличить скорость 25 млн пакетов в секунду: (--rate)\nsudo masscan 172.217.167.46 -p0-65535 --rate 25000000\nMASSCAN - это инструмент для сканирования портов сетевых устройств с высокой скоростью. Он позволяет быстро сканировать большое количество IP-адресов и портов и обнаруживать открытые порты и службы на удаленных устройствах.\nНекоторые из основных функций MASSCAN включают:\n1. Высокая скорость сканирования - MASSCAN может сканировать порты сетевых устройств на скорости до нескольких миллионов пакетов в секунду.\n2. Поддержка IPv4 и IPv6 - MASSCAN поддерживает как IPv4, так и IPv6 адреса.\n3. Поддержка различных протоколов - MASSCAN может сканировать порты для различных протоколов, таких как TCP, UDP, ICMP, SCTP и других.\n4. Настройка параметров сканирования - MASSCAN позволяет настраивать параметры сканирования, такие как скорость сканирования, количество потоков, диапазон IP-адресов и портов.\n5. Гибкая фильтрация результатов - MASSCAN позволяет фильтровать результаты сканирования по различным параметрам, таким как открытые порты, протоколы, сертификаты SSL и другие.\n6. Экспорт результатов сканирования - MASSCAN может экспортировать результаты сканирования в различных форматах, таких как CSV, XML или JSON.\nПримеры фильтров Wireshark\nWireshark - это инструмент для анализа сетевого трафика, который может быть использован для обнаружения уязвимостей и анализа безопасности сети. Для упрощения анализа сетевого трафика, Wireshark предоставляет возможность использования фильтров. Некоторые из примеров фильтров Wireshark включают в себя:\n1. Фильтр по IP-адресу: ip.addr == 192.168.1.1\nЭтот фильтр позволяет отобразить только те пакеты, которые отправляются или принимаются с IP-адреса 192.168.1.1.\n2. Фильтр по протоколу: tcp\nЭтот фильтр позволяет отобразить только те пакеты, которые используют протокол TCP.\n3. Фильтр по порту: tcp.port == 80\nЭтот фильтр позволяет отобразить только те пакеты, которые используют порт 80 для TCP-соединения.\n4. Фильтр по ключевому слову в данных пакета: data contains “password”\nЭтот фильтр позволяет отобразить только те пакеты, которые содержат ключевое слово “password” в данных.\n5. Фильтр по MAC-адресу: eth.addr == 00:11:22:33:44:55\nЭтот фильтр позволяет отобразить только те пакеты, которые отправляются или принимаются с MAC-адреса 00:11:22:33:44:55.\n6. Фильтр по типу пакета: frame.type == 0x0800\nЭтот фильтр позволяет отобразить только те пакеты, которые имеют тип 0x0800 (IPv4).\n7. Фильтр по номеру порта: udp.port == 53\nЭтот фильтр позволяет отобразить только те пакеты, которые используют порт 53 для UDP-соединения.\nФункции утилиты Intercepter-NG\nIntercepter-NG (Next Generation) - это инструмент для мониторинга и анализа сетевого трафика, который может быть использован для тестирования на проникновение и анализа безопасности сети. Он предоставляет множество функций, включая:\n1. Перехват HTTP-трафика - Intercepter-NG может перехватывать HTTP-трафик между браузером и веб-сервером, позволяя анализировать заголовки, параметры запросов и ответы на запросы.\n2. Перехват HTTPS-трафика - Intercepter-NG может перехватывать HTTPS-трафик, используя собственный корневой сертификат, который устанавливается на устройство.\n3. Анализ сетевых протоколов - Intercepter-NG может анализировать различные сетевые протоколы, такие как DNS, FTP, SSH, Telnet, ICMP, ARP и другие.\n4. Анализ локальной сети - Intercepter-NG может отображать список устройств, подключенных к локальной сети, и проводить анализ их сетевой активности.\n5. Сканирование портов - Intercepter-NG может сканировать порты сетевых устройств на наличие открытых портов и служб.\n6. Анализ пакетов - Intercepter-NG может анализировать содержимое сетевых пакетов, включая данные, передаваемые между устройствами.\n7. Модификация трафика - Intercepter-NG может модифицировать сетевой трафик, включая изменение параметров запросов и ответов.\n8. Создание и отправка кастомных пакетов - Intercepter-NG может создавать и отправлять кастомные сетевые пакеты для тестирования на проникновение.\n9. Поддержка скриптов - Intercepter-NG поддерживает скрипты на языке Lua, которые могут быть использованы для автоматизации задач и проведения тестирования на проникновение.\nЧто такое Burp Suite?\nBurp Suite - это инструмент для тестирования на проникновение веб-приложений, разработанный компанией PortSwigger. Он представляет собой набор инструментов, которые используются для тестирования безопасности веб-приложений, включая сканирование уязвимостей, анализ трафика и тестирование на проникновение.\nBurp Suite состоит из нескольких компонентов, включая:\n1. Proxy Server - это основной компонент Burp Suite, который используется для перехвата и модификации HTTP-трафика между браузером и сервером веб-приложения.\n2. Scanner - это инструмент для автоматического сканирования веб-приложений на наличие уязвимостей, таких как SQL-инъекции, межсайтового скриптинга и других.\n3. Repeater - это инструмент для повторного выполнения запросов к серверу веб-приложения с возможностью изменения параметров запроса.\n4. Intruder - это инструмент для автоматического тестирования на проникновение, который выполняет атаки перебора паролей, перебора параметров и другие атаки.\n5. Sequencer - это инструмент для анализа случайности генерации токенов и других защитных механизмов веб-приложений.\n6. Decoder - это инструмент для декодирования и кодирования данных, используемых в HTTP-запросах, таких как URL-адреса, HTML-код и другие.\nBurp Suite также имеет функциональность для анализа трафика, перехвата запросов и ответов, поддержки прокси-аутентификации, анализа сессий и других. Он является одним из наиболее популярных инструментов для тестирования безопасности веб-приложений и используется многими профессионалами в области информационной безопасности.\nПримеры утилит для брутфорса\nБрутфорс (англ. brute force) - это техника атаки на систему, при которой злоумышленник использует программное обеспечение для перебора всех возможных комбинаций паролей или ключей, пока не будет найден правильный. Некоторые из примеров утилит для брутфорса включают в себя:\n1. Hydra - утилита для брутфорса паролей, которая может использоваться для взлома различных протоколов, таких как SSH, FTP, Telnet, HTTP и другие. Hydra поддерживает множество опций и может быть настроен для выполнения различных видов атак.\n2. Medusa - утилита для брутфорса паролей, которая может использоваться для взлома различных протоколов, таких как SSH, FTP, Telnet, HTTP и другие. Medusa поддерживает множество опций и может быть настроен для выполнения различных видов атак.\n3. Ncrack - утилита для брутфорса паролей, которая может использоваться для взлома различных протоколов, таких как SSH, FTP, Telnet, HTTP и другие. Ncrack поддерживает множество опций и может быть настроен для выполнения различных видов атак.\n4. THC Hydra - утилита для брутфорса паролей, которая может использоваться для взлома различных протоколов, таких как SSH, FTP, Telnet, HTTP и другие. THC Hydra поддерживает множество опций и может быть настроен для выполнения различных видов атак.\n5. John the Ripper - утилита для брутфорса паролей, которая может использоваться для взлома хэшей паролей, зашифрованных с использованием различных алгоритмов, таких как MD5, SHA-1, NTLM и другие. John the Ripper поддерживает множество опций и может быть настроен для выполнения различных видов атак.\n6. Aircrack-ng - утилита для брутфорса паролей Wi-Fi, которая может использоваться для взлома ключей WEP и WPA/WPA2. Aircrack-ng поддерживает множество опций и может быть настроен для выполнения различных видов атак.\nПримеры техник enumeration\nEnumeration (перечисление) - это процесс сбора информации о системе, сети или приложении, который может быть использован злоумышленниками для дальнейших атак. Некоторые из примеров техник enumeration включают в себя:\n1. SNMP Enumeration - процесс сбора информации с помощью Simple Network Management Protocol (SNMP), который может быть использован для сбора информации о сетевых устройствах, таких как маршрутизаторы, коммутаторы, принтеры и другие.\n2. LDAP Enumeration - процесс сбора информации с помощью Lightweight Directory Access Protocol (LDAP), который может быть использован для сбора информации о пользователях, группах и других объектах в каталоге Active Directory.\n3. DNS Enumeration - процесс сбора информации о системе и сети с помощью DNS-запросов, который может быть использован для получения информации об IP-адресах, доменных именах и других сетевых ресурсах.\n4. NTP Enumeration - процесс сбора информации с помощью Network Time Protocol (NTP), который может быть использован для определения времени на системе и получения информации об устройстве, работающем на основе NTP.\n5. SMTP Enumeration - процесс сбора информации с помощью Simple Mail Transfer Protocol (SMTP), который может быть использован для получения информации о почтовых серверах, адресах электронной почты и других сведениях.\n6. Port Scanning - процесс сканирования портов сетевого устройства с целью определения открытых портов и служб, которые могут быть использованы для проведения атак.\n7. Опрос сети - процесс сбора информации о сетевых устройствах, включая IP-адреса, MAC-адреса, операционные системы и другую информацию, которая может быть использована для проведения атак.\nАтака DNS zone transfer\nАтака DNS zone transfer - это тип атаки на сервер DNS, который используется для запроса и получения копии зоны DNS с другого сервера DNS. Зона DNS - это набор записей, которые определяют имена доменов и их соответствующие IP-адреса.\nDNS zone transfer может быть использован злоумышленниками для получения конфиденциальной информации об устройстве и настройках сети, таких как имена хостов, IP-адреса, адреса электронной почты и другие данные, которые можно использовать для проведения дальнейших атак на сеть.\nАтака DNS zone transfer может быть осуществлена с помощью различных инструментов, таких как Nmap, DNSenum, Fierce, dnsrecon и других. Она может быть предотвращена путем настройки сервера DNS таким образом, чтобы запретить запросы на передачу зоны от несанкционированных источников.\nДля защиты от атак DNS zone transfer можно использовать следующие меры:\n1. Ограничение доступа к серверам DNS - ограничение доступа к серверам DNS только тем пользователям, которым это необходимо для выполнения своих задач.\n2. Настройка DNS-сервера - настройка сервера DNS таким образом, чтобы запретить запросы на передачу зоны от несанкционированных источников.\n3. Использование серверов DNS с поддержкой DNSSEC - DNSSEC (Domain Name System Security Extensions) - это набор расширений протокола DNS, которые обеспечивают целостность и подлинность данных DNS. Использование серверов DNS с поддержкой DNSSEC может предотвратить атаки на сервер DNS и защитить от запросов на передачу зоны.\n4. Мониторинг и журналирование - мониторинг серверов DNS и журналирование событий могут обнаружить попытки атаки DNS zone transfer и предотвратить их.\n5. Использование средств защиты от DDoS-атак - использование средств защиты от DDoS-атак может помочь предотвратить атаки на сервер DNS, включая атаки на DNS zone transfer.\nПримеры утилит для SMB Enumeration\n1. Nmap: Инструмент сканирования портов, который может использоваться для обнаружения и сканирования SMB-серверов.\n2. enum4linux: Инструмент командной строки, который можно использовать для автоматизации процесса SMB-энумерации. Он может использоваться для сбора информации о пользователях, группах, полномочиях и шарах.\n3. smbmap: Инструмент командной строки, который может использоваться для определения наличия открытых SMB-шар на удаленных системах. Он также может предоставить информацию о доступе и правах на шары.\n4. smbclient: Интерактивный клиент для SMB-протокола, который можно использовать для получения доступа к шарам, а также для передачи файлов и папок.\n5. Metasploit Framework: Инструмент, который может использоваться для SMB-эксплойтов и внедрения в систему.\n6. CrackMapExec: Инструмент для автоматизации SMB-атак. Он может использоваться для сбора информации о системе, подбора паролей и выполнения атак на SMB-серверы.\nПредназначение HTTP Enumeration. Примеры утилит\nHTTP enumeration предназначен для идентификации и сбора информации об открытых HTTP-серверах и веб-приложениях. Целью этой техники является обнаружение и анализ открытых http-серверов, проверка конфигурации, выявление уязвимостей в протоколе HTTP и приложениях, запущенных на серверах.\nПримеры утилит, используемых для HTTP enumeration:\n1. Nmap - универсальный сканер и инструмент для определения открытых портов, используемый для обнаружения веб-серверов и протокола HTTP.\n2. Nikto - утилита для сканирования веб-серверов на наличие уязвимостей в обслуживаемых веб-приложениях.\n3. DirBuster - инструмент для перебора файлов и каталогов веб-серверов с использованием списка заранее определенных словарей.\n4. OWASP ZAP - инструмент для тестирования безопасности веб-приложений, который может использоваться для сканирования http-серверов на наличие уязвимостей.\n5. Burp Suite - комплексный инструмент для тестирования безопасности веб-приложений, в том числе для сканирования http-серверов на наличие уязвимостей и их эксплуатации.\n6. HTTPRECON - утилита, которая используется для сбора информации о веб-серверах: это позволяет определить тип веб-сервера, операционную систему, версии используемого программного обеспечения и другие характеристики, которые могут быть полезны при проведении тестирования безопасности.\nЧто такое технология «проксирования»? Примеры утилит\nТехнология проксирования (proxying) – это метод маршрутизации трафика в сети, при котором пользователь не напрямую обращается к исходному серверу, а через посредника, который может выполнять различные функции, такие как кеширование, обработка контента, фильтрация и обеспечение безопасности. Прокси-сервер может быть размещен на локальной сети, Интернет-провайдером или быть частью большой инфраструктуры сетевой безопасности.\nПримеры утилит для работы с прокси:\n1. Squid – один из наиболее популярных и гибких прокси-серверов с функциями кеширования, фильтрации и аутентификации.\n2. Nginx – веб-сервер и прокси-сервер с высокой производительностью и эффективностью в обработке больших объемов запросов.\n3. Apache – веб-сервер, который также может использоваться в качестве прокси-сервера.\n4. Shadowsocks – утилита для создания зашифрованного туннеля через прокси-сервер для безопасного доступа к контенту.\n5. Tor – сеть прокси-серверов, которые используются для обеспечения анонимности в Интернете.\nКакие бывают группы киберпреступников?\nСуществует несколько типов групп киберпреступников, в зависимости от их основных целей и методов деятельности. Рассмотрим некоторые из них:\n1. Хактивисты (hacktivists) - это группы киберпреступников, которые используют свои навыки в области компьютерной безопасности для проведения политических или социальных кампаний. Они могут атаковать веб-сайты правительственных организаций, больших корпораций или банков, чтобы выразить свои протесты.\n2. Кибершантажисты (cyber extortionists) - это группы киберпреступников, которые используют хакерские атаки для получения денежных выгод. Они могут запрашивать выкуп для возвращения контроля над взломанными данными или шантажировать жертву на угрозой разглашения конфиденциальной информации.\n3. Криминальные группировки (criminal organizations) - это группы, которые занимаются киберпреступностью и получают материальную выгоду от своих действий. Они могут использовать компьютерные вирусы и троянские программы, чтобы воровать деньги или личную информацию у жертв.\n4. Государственные хакеры (state-sponsored hackers) - это группы, которые работают на правительства, с целью получения секретной информации других стран, а также для воздействия на оппонентов. Они могут использовать различные техники, такие как фишинг, шпионские программы, вирусы и другие, чтобы добыть нужную информацию.\nКибератаки на телеком сектор\nКибератаки на телеком сектор - это кибератаки, направленные против компаний, которые предоставляют услуги связи, такие как телефония, интернет, телевидение и мобильная связь. Целью таких атак может быть получение доступа к конфиденциальным данным клиентов, прерывание работы сетей или нанесение финансового ущерба компании.\nПримеры кибератак на телеком сектор включают в себя DDoS-атаки, фишинг, атаки на уязвимости в сетевом оборудовании и заражение вирусами и вредоносным ПО. Такие атаки могут привести к серьезным последствиям для компаний, включая потерю клиентов, штрафы за нарушение норм охраны данных и репутационный ущерб. Поэтому компании, работающие в телеком секторе, должны уделять большое внимание мерам кибербезопасности и регулярно обновлять свои системы защиты.\nКибератаки на энергетический сектор (примеры фреймворков)\nКибератаки на энергетический сектор становятся все более распространенными в последнее время. Некоторые примеры фреймворков, используемых злоумышленниками:\n1. Dragonfly/Energetic Bear - это группа хакеров, которая активна с 2011 года и направляет свои атаки на энергетические компании по всему миру, включая США, Европу и Азию. Они часто используют уязвимости в оборудовании, Ботнеты и поддельные сертификаты, чтобы получить доступ к системам и данных.\n2. BlackEnergy - это группа хакеров, которые направляют свои атаки на энергетические системы, особенно на украинской территории. Они используют фишинговые атаки, эксплойты и вредоносные программы для получения доступа к системам и получения контроля над ними.\n3. Sandworm - это группа хакеров, которые направляют свои атаки на энергетические системы, особенно на территории Европы и США. Они используют уязвимости в программном обеспечении, эксплойты и вредоносные программы, чтобы получить доступ к системам и данных.\n4. Turla - это группа хакеров, которые направляют свои атаки на энергетические системы в Европе и Соединенных Штатах. Они используют социальную инженерию, фишинговые атаки и вредоносные программы, чтобы получить доступ к системам и получить контроль над ними.\nЭти фреймворки используются злоумышленниками, чтобы получить доступ к энергетической инфраструктуре, украсть данные и управлять системами. Для защиты от кибератак необходимо использовать эффективные методы обеспечения информационной безопасности, такие как сегментация сети, многофакторная аутентификация, мониторинг активности пользователей и прочие меры.\nЧто такое тип кибератаки Supply Chain?\nТип кибератаки Supply Chain - это вид кибератаки, который использует уязвимости в компонентах поставочной цепи для получения несанкционированного доступа к целевой системе или данных. Этот вид атаки может включать в себя компрометацию поставщиков, контрактных компаний, логистических компаний и других поставщиков услуг, участвующих в процессе поставки продукции или услуг.\nНапример, киберпреступники могут заразить вредоносным кодом компьютеры поставщиков или изменить программное обеспечение, устанавливаемое в процессе производства продукции, таким образом получив возможность выполнения вредоносных действий на целевой системе.\nДля защиты от подобных атак, компании должны строго контролировать своих поставщиков, а также убедиться в безопасности всей цепочки поставки продукции или услуг.\n\nАтака на цепочку поставок - это кибератака, направленная на нанесение ущерба организации путем нацеливания на менее защищенные элементы в цепочке поставок. Атака на цепочку поставок может произойти в любой отрасли, от финансового сектора, нефтяной промышленности до государственного сектора. Атака на цепочку поставок может происходить в программном или аппаратном обеспечении. Киберпреступники обычно вмешиваются в производство или распространение продукта, устанавливая вредоносные программы или аппаратные шпионские компоненты. В отчете Symantec об угрозах интернет-безопасности за 2019 год говорится, что количество атак на цепочку поставок в 2018 году увеличилось на 78 процентов.\nПримеры открытых военных киберопераций\n1. Кибератака на Иран. В 2010 году США и Израиль провели кибератаку на иранскую ядерную установку. Эта атака называлась «Стуканье» и заключалась в использовании вредоносных программ, которые уничтожили тысячи иранских центрифужных установок.\n2. Российские кибератаки на Украину. Российские хакеры совершили серию кибератак на Украину в 2014 году, когда Крым был аннексирован Россией. Эти атаки включали в себя блокировку доступа к сайтам украинских правительственных учреждений, кражу данных и навязывание вредоносных программ.\n3. Израильская кибероперация «Прометей». Эта кибероперация была запущена Израилем после того, как ливанская группировка Хизбалла использовала беспилотники, чтобы напасть на Израиль. В рамках кибероперации «Прометей» были заблокированы некоторые системы Хизбаллы и украдены данные.\n4. Кибератака на Сони. В 2014 году США обвинили Северную Корею в кибератаке на компанию Sony Pictures Entertainment. Атака привела к утечке конфиденциальной информации и ее публичному раскрытию в интернете.\n5. Китайская кибершпионажная кампания. С 2006 года Китай проводит кибершпионажные операции в США и других странах. В рамках этих операций китайские хакеры украли конфиденциальную информацию из многих американских организаций, включая правительственные агентства, военные подрядчики и корпорации.\nЧто такое JS-сниффер? Основные этапы заражения\nJS-сниффер – это несколько строк кода, который внедряется злоумышленниками на сайт для перехвата вводимых пользователем данных: номеров банковских карт, имен, адресов, логинов, паролей\n(аналог скиммера. Но скиммер это миниатюрное устройство, перехватывающее данные банковской карты пользователя в банкомате)\n\nКроме «классического» внедрения скрипта по ссылке, операторы снифферов семейства ReactGet используют особую технику: при помощи JavaScript-кода проверяется, соответствует ли текущий адрес, на котором находится пользователь, определенным критериям. Вредоносный код будет запущен только в том случае, если в текущем URL-адресе присутствует подстрока checkout или onestepcheckout, onepage/, out/onepag, checkout/one, ckout/one. Таким образом, код сниффера исполнится именно в тот момент, когда пользователь перейдет к оплате покупок и введет платежную информацию в форму на сайте.\nЭтот сниффер использует нестандартную технику. Платежные и персональные данные жертвы собираются вместе, кодируются при помощи base64, а затем полученная строка используется как параметр для отправки запроса на сайт злоумышленников. Чаще всего путь до гейта имитирует JavaScript-файл, к примеру resp.js, data.js и так далее, но также используются ссылки на файлы изображений, GIF и JPG. Особенность в том, что сниффер создает объект изображения размером 1 на 1 пиксель и использует полученную ранее ссылку как параметр src изображения. То есть для пользователя такой запрос в трафике будет выглядеть как запрос обычной картинки. Похожая техника была использована в снифферах семейства ImageID. Кроме того, техника с использованием изображения размером 1 на 1 пиксель применяется во многих легитимных скриптах онлайн-аналитики, что также может ввести пользователя в заблуждение.\nПримеры кибератак на банковский сектор\nСовременные кибернападения чаще всего реализуются с использованием человеческого фактора. Речь идет о фишинге (Интернет-мошенничество с целью получения доступа к конфиденциальным данным) и социальной инженерии (психологическое манипулирование людьми с целью хищения средств или персональных сведений). На эти два способа приходится подавляющее большинство атак на банковских клиентов. Потери кредитных организаций при этом в среднем оцениваются в 17,7 тыс. долл. в минуту.\n\nОсновные направления атак на банки — это:\n\nтелефонное мошенничество с клиентами банка;\nмошенничество с денежными переводами и банковскими картами;\nмошенничество со счетами клиентов банка.\n\nОсновные типы банковских киберугроз:\n\nатака, цель которой получить доступ к данным клиентов банка, а потом перепродавать эти данные;\nпрограммы-угрозы, цель которых похитить данные или остановить банковский процесс;\nвредоносные программы для хищения денег у клиентов банка;\nманипуляции с целью отмыть деньги;\nспециализированные атаки на VIP-клиентов банка и их транзакции;\n\nСамые интересные киберпреступления в банковской сфере\nЗа 2020-й год:\n\nза весь год со счетов россиян было похищено около 9.7 млрд руб.;\nяпонский почтовый банк пострадал от рук киберпреступников на сумму более 20 млн долларов, завладев информацией о клиентах банка, использующих определенное приложение.\n\nЗа 2019-й год:\n\nв России было похищено более 23 млрд рублей с банковских счетов и электронных кошельков: из них на долю хакерских атак приходится 6.5 млрд руб., и 3.5 млрд рублей приходится на долю троян-приложений, которые похищали деньги клиентов, используя их смартфон;\nв Беларуси со счетов одного из банков было похищено более 1 млн долларов.\n\nЗа 2018-й год:\n\nиз европейских отделений Райффайзенбанка киберпреступниками было похищено более 30 млн евро, применяя брешь в системе безопасности банка;\nбыли взломаны платежные карты банка Islami и похищено с карт около 7 млн долларов;\nМексиканский Государственный Банк потерял более 100 млн $ за счет организованной кибератаки;\nв России было обнаружено специальное фейковое банковское приложение, которое приносило доход злоумышленникам около 500 тыс. рублей в день.\n\nРассказать о любой хакерской группировке (цели, инструменты и т.д.)\nГруппировка Killnet\n\nЦель: сделать интернет безопасным. Защита интересов России. Хактивизм. DDoS-атака, другие механизмы, позволяющие повредить сетевую инфраструктуру жертвы.\nDDoS-атаки на правит. сайты иностранных гос-в, взлом (фальшивые заявления на гос. сайтах)\n=&gt; повреждение сетевой инфраструктуры жертвы, нет доступа для пользователей из-за повышенного трафика, генерируемого атакой.\n\nПрименяемые техники и тактики, согласно матрице MITTRE ATT&CK.\n\nГруппировка Killnet известна своим использованием различных техник и тактик в своих кибератаках. Ниже приведены некоторые из них согласно матрице MITRE ATT&CK:\nПерехват сетевого трафика (Network Sniffing): Killnet использует перехват сетевого трафика, чтобы получить доступ к конфиденциальной информации, пересылаемой через сеть. Они используют инструменты, такие как Wireshark и Tcpdump, для захвата и анализа трафика.\nЭксплойты (Exploits): Killnet использует уязвимости в программах и операционных системах, чтобы получить удаленный доступ к компьютерам и сетевым устройствам. Они могут использовать известные уязвимости или создавать собственные эксплойты.\nСоциальная инженерия (Social Engineering): Killnet использует социальную инженерию, чтобы обмануть пользователей и получить доступ к конфиденциальной информации. Например, они могут отправлять фишинговые электронные письма с вредоносными вложениями или ссылками на поддельные веб-сайты.\nDDoS-атаки (Distributed Denial of Service): Killnet использует DDoS-атаки, чтобы перегрузить серверы и привести к временной недоступности веб-сайтов и других онлайн-ресурсов. Они используют ботнеты, состоящие из зараженных компьютеров, чтобы выполнить масштабные DDoS-атаки.\nSpearphishing: Killnet использует спирофишинговые атаки, чтобы получить доступ к системам цели. Они могут отправлять фишинговые письма с вредоносными вложениями или ссылками на вредоносные сайты.\nВзлом паролей: Killnet может использовать утечки паролей или подбор паролей для взлома учетных записей и получения доступа к системам цели.\nИспользование уязвимостей: Killnet активно ищет уязвимости в системах цели и использует их для получения доступа и распространения вредоносного кода.\nРаспространение вредоносного кода: Кроме использования уязвимостей, Killnet может распространять вредоносный код через социальную инженерию, фишинг и другие методы.\nКомпрометация учетных записей: Кроме взлома паролей, Killnet может использовать другие методы, такие как перехват сеансов, чтобы получить доступ к учетным записям пользователей.\nКомпрометация облачных сервисов: Killnet может атаковать облачные сервисы, используемые целью, чтобы получить доступ к конфиденциальным данным и приложениям.\nКомпрометация сетевых устройств: Killnet может использовать уязвимости в сетевых устройствах, таких как маршрутизаторы, для получения доступа к сетям цели.\nУдаленный доступ: Killnet использует удаленные утилиты доступа, такие как TeamViewer, для получения удаленного доступа к компьютерам жертв.\nИспользование 0-day уязвимостей: Killnet может использовать 0-day уязвимости для внедрения вредоносного кода в системы, которые еще не исправлены.\nВнедрение вредоносного ПО: Killnet использует вредоносное ПО, в том числе троянские программы и рансомвар, для получения контроля над целевой системой.\nИспользование уязвимостей в ПО: Killnet ищет уязвимости в программном обеспечении и использует их для внедрения вредоносного кода или получения несанкционированного доступа.\n\nKillnet может комбинировать вышеперечисленные техники и тактики для достижения максимального эффекта при реализации своих киберпреступных целей.\nИнформация об используемых группировкой инструментах, программном обеспечении.\n\nГруппировка Killnet использует различные инструменты и программное обеспечение в своих кибератаках. Некоторые известные инструменты и ПО, используемые Killnet, включают в себя:\nCobalt Strike - инструмент для тестирования на проникновение, который может использоваться для атаки на сети, включая социальную инженерию, эксплойты уязвимостей, перехват сетевого трафика и т.д.\nMetasploit Framework - программный инструмент для тестирования на проникновение, который может использоваться для поиска и эксплуатации уязвимостей в сетях и системах.\nMimikatz - инструмент, используемый для получения доступа к учетным записям пользователей и паролям, хранящимся в памяти компьютеров и серверов.\nNmap - инструмент для сканирования сети, который может использоваться для определения уязвимостей и поиска устройств в сети.\nHydra - инструмент для брутфорса, используемый для взлома паролей и аутентификации в различных системах.\nSQLmap - инструмент для автоматизированного тестирования на уязвимости баз данных SQL, включая SQL-инъекции.\nWireshark - инструмент для анализа сетевого трафика, используемый для перехвата, анализа и мониторинга сетевого трафика.\nPowerShell Empire - инструмент, который может использоваться для создания и управления задействованными в атаках “задействованными агентами”, их использования для выполнения различных задач, таких как обход защиты, взлом учетных записей и т.д.\nAPT33 - вредоносное ПО, связанное с группировкой Killnet, которое может использоваться для шпионажа, сбора информации и кибершпионажа.\nRedXOR - вредоносное ПО, связанное с группировкой Killnet, которое используется для кибершпионажа и киберпреступлений.\n\nЗаметим, что это только некоторые из инструментов и программного обеспечения, используемых группировкой Killnet. В большинстве случаев, они использовались в сочетании друг с другом."
  },
  {
    "objectID": "tivkias.html",
    "href": "tivkias.html",
    "title": "Технологии информационного взаимодействия компонент информационно-аналитических систем",
    "section": "",
    "text": "1. Компилятор.\nКомпилятор — программа, переводящая написанный на языке программирования текст в набор машинных кодов. В основном используется для программ, которые переводят исходный код с ЯП высокого уровня на более низкий.\nКомпилятор компиляторов - транслятор, воспринимающий формальное описание языка программирования и генерирующий компилятор для этого языка.\n2. Перекодировщик.\nПерекодировщик осуществляет перевод текста программы одного ЯП в текст программы другого аналогичного по уровню.\n3. Компилирующий режим.\nКомпиляция — это процесс перевода исходного кода программы на машинный язык. Ее результатом является создание исполняемого файла программы, который может быть запущен в торговой платформе.\nКомпиляция состоит из нескольких этапов:\n·      Лексический анализ\n·      Синтаксический анализ\n·      Семантический анализ\n·      Генерация кода\n·      Оптимизация кода\n4. Интерпретатор.\nИнтерпретатор (на входе тексты на языке высокого уровня, на выходе тоже машинный код (который на выход подает текст по частям))\nИнтерпретация — построчный анализ, обработка и выполнение исходного кода программы или запроса (в отличие от компиляции, где весь текст программы, перед запуском, анализируется и транслируется в машинный или байт-код, без её выполнения)\n5. Основные части транслятора.\nТранслятор — программа, которая принимает на вход текст программы на одном языке (он в этом случае называется исходный язык), и преобразует её в программу, написанную на другом языке. Перевод одного языка в другой называется трансляцией.\nВиды трансляторов:\n·      Компилятор\n·      Интерпретатор\n·      Ретранслятор\n·      Перекодировщик\nТранслятор можно построить по классической схеме, в которой чётко выделяются 3 части: лексический анализатор, распознаватель (синтаксический анализатор) и генератор (семантический анализатор);\n\n6. Анализирующая часть транслятора состоит из . . .\nЛексического, синтаксического и семантическогоанализаторов.\nЛексический анализатор преобразует входной символьный поток в последовательность более крупных единиц – лексем. Например, текст из 14 символов (включая пробелы) преобразуется в последовательность из 7 лексем\nСинтаксический анализатор входного языка проверяет синтаксическую правильность входной цепочки (уже разбитой на лексемы) и строит её семантическое дерево.\nКонтекстный анализатор проверяет выполнение контекстных условий (соответствия типов данных, числа параметров процедур, отсутствия передачи управления внутрь тела цикла и многих других), а также расширяет семантическое дерево программы до её полной семантической структуры. На практике его обычно соединяют с синтаксическим анализатором.\nСемантический анализатор – это часть компилятора, которая проверяет смысловую правильность конструкции языка. Задача семантического анализатора состоит в том, чтобы извлечь из формально построенного синтаксического дерева содержательную информацию о структуре программы.\n7. Последовательность работы анализаторов.\nВозможны 2 схемы работы транслятора.\nПервая – использует блочный принцип, при котором части транслятора вызываются в последовательности: лексический анализатор, распознаватель, генератор. Каждая часть обрабатывает всю программу от начала до конца и только после этого работает следующая часть.\nВторая – использует принципы подпрограмм, когда все части транслятора работают совместно, каждый очередной входной символ лексического анализатора немедленно обрабатывается распознавателем, а каждый элемент разбора, если нужно, тут же вызывает требуемую семантическую подпрограмму генератора.\n8. Как реализованы лексический и синтаксический анализаторы в однопроходном трансляторе?\nЛексический анализатор и генератор кода выступают в роли вызываемых им подпрограмм. Как только синтаксическому анализатору нужна очередная лексема, он вызывает сканер. При получении фрагмента промежуточного представления осуществляется обращение к генератору кода. Завершение процесса трансляции происходит после получения и обработки последней лексемы и инициируется синтаксическим анализатором.\n9. Реализация семантического анализатора.\nСемантический анализатор – это часть компилятора, которая проверяет смысловую правильность конструкции языка.\nЗадача семантического анализатора состоит в том, чтобы извлечь из формально построенного синтаксического дерева содержательную информацию о структуре программы.\nВходными данными для семантического анализа служат: таблица идентификаторов; результаты разбора синтаксических конструкций входного языка.\nСемантический анализ выполняется на 2 этапах компиляции: на этапе синтаксического разбора и в начале этапа подготовки к генерации кода.\n10. Какие типы ошибок должна распознавать анализирующая часть транслятора?\n3 вида ошибок:\nЛексические ошибки, ошибки набивания текста. Самое простое – ошибки в ключевых словах. Например, в словах: “Begin”, “End”.\nСинтаксические ошибки – ошибки в конструкциях используемого (разрабатываемого) языка программирования. Т.е., входной текст не соответствует правилам написания входного языка.\nСемантические ошибки – ошибки в алгоритме программы (не ловятся транслирующими средствами)\n11. Какие типы ошибок распознаются в генерирующей части транслятора?\nникакие.\nчто это вообще:…\nВ лексемах отсутствуют комментарии.\nЛексемы одинаковой длины.\nЛексемы несут числовую информацию.\n12. Генерирующая часть транслятора состоит из: …\nОптимизатор\nГенератор\n13. На вход генерирующей части транслятора поступают: …\nНа входе генератора кода – промежуточные таблицы\n14. На выходе генератора кода получаем: …\nНа выходе – текст на выходном языке.\n15. Вход и выход генератора кода (генерирующей части транслятора).\nНа входе генератора кода – промежуточные таблицы; на выходе – текст на выходном языке.\n16. Генерирующая часть транслятора в свою очередь состоит из: . . .\nОптимизатор\nГенератор\n17. В какой части транслятора реализован семантический анализатор?\nСемантический анализ выполняется на 2 этапах компиляции: на этапе синтаксического разбора и в начале этапа подготовки к генерации кода.\nВ первом случае всякий раз по завершении распознавания определенной синтаксической конструкции входного языка выполняется её семантическая проверка на основе имеющихся в таблице идентификаторов данных.\nВо втором случае, после завершения всей фазы синтаксического разбора, выполняется полный семантический анализ программы на основании данных в таблице идентификаторов.\nВ каждом компиляторе обычно присутствуют оба варианта семантического анализатора.\n18. Что должен демонстрировать транслятор, работающий до первой ошибки?\nДиагностические сообщения об ошибке, указание конкретного места и типа ошибки.\n19. Основные преимущества работы транслятора до первой ошибки по сравнению с традиционными вариантами.\nТрадиционный вариант диагностики (все ошибки) имеет существенные недостатки – так называемые наведенные ошибки. Например: при неправильном описании переменной в заголовке программы, все вхождения этой переменной в основной части программы будут диагностироваться ошибочными.\nИногда при изменении, скажем, одного оператора промышленный транслятор выдает целый ряд ошибок и среди них достаточно трудно найти “основную” или “главную”.\nАлгоритм работы до первой ошибки вполне приемлем при реализации проблемно-ориентированного ЯП. Упор делается на точное диагностирование ошибки.\n20. Что означает число проходов (однопроходный транслятор, двухпроходный транслятор, многопроходный транслятор)?\nПроход – это полный просмотр исходного текста программы.\nОднопроходной транслятор — транслятор, преобразующий исходный код при его однократном последовательном чтении (за один проход).\nМногопроходной транслятор — транслятор, преобразующий исходный код после его нескольких чтений (за несколько проходов).\n21. Семантические ошибки.\nСемантические ошибки – ошибки в алгоритме программы (не ловятся транслирующими средствами).\nСемантическая ошибка возникает, когда оператор синтаксически правильный, но не выполняет то, что задумал программист. Иногда это приводит к сбою программы, например, в случае деления на ноль.\nВ большинстве случаев компилятор не сможет отловить большинство из этих типов проблем, потому что компилятор предназначен для обеспечения соблюдения грамматики, а не намерений.\n22. Какие промежуточные этапы необходимо использовать при переходе от «постановки задачи» к «программному обеспечению»?\nПереход от «Постановки задачи» к «Программе» труден и неэффективен. Целесообразно добавить еще два элемента «Алгоритм» и «Блок-схема алгоритма».\nОсновные усилия нужно направить на создание алгоритма (70% всех усилий). Затем по алгоритму построить блок-схему (20 %), которая является графическим образом программы. Переход от блок-схемы к программе должен занимать немного усилий.\n23. Основные принципы структурного программирования.\n3 принципа:\n·      максимальное включение комментария в программу,\n·      не использование оператора GOTO;\n·      использование только трех (пяти) разрешенных блоков: функционального, ветвления (If-THEN-ELSE и случай CASE) и цикла (с предусловием и с постусловием)\n\n\n24. Три основных блока структурного программирования: . . .\n\n25. Переход от 3 этапов структурного программирования к 5-ти: . . .\n\n26. Пять основных блоков структурного программирования включают в себя два блока цикла: . . .\n·      цикл с пред условием\n·      цикл с пост условием\n27. Основное (объединяющее) достоинство трех блоков структурного программирование.\n1 вход 1 выход нет прыжков\n1) повышается надежность программ (благодаря хорошему структурированию при проектировании, программа легко поддается тестированию и не создает проблем при отладке); 2) повышается эффективность программ (структурирование программы позволяет легко находить и корректировать ошибки, а отдельные подпрограммы можно переделывать (модифицировать) независимо от других); 3) уменьшается время и стоимость программной разработки; 4) улучшается читабельность программ.\n28. Из трех операторов цикла какой избыточен (без него можно обойтись)?\n3 вида конструкций цикла:\n·      с фиксированным числом итераций,\n·      с предусловием,\n·      с постусловием.\nИзбыточный варианта (а). Без варианта (а) можно обойтись\n29. Три этапа программирования: . . .\n·      Написание программы.\n·      Откладка.\n·      Тестирование\n31. Основные составляющие формы Бэкуса-Наура.\nБНФ – формальная система описания синтаксиса, в которой одни синтаксические категории последовательно определяются через другие категории. БНФ используется для описания контекстно-свободных формальных грамматик. Используется для описания синтаксиса ЯП, данных, протоколов\nязык = “Вegin” Звено...Звено Опр “;” ... Опр “End”\nЗвено = [“First” ! “Second”] Вещ “,” ... Вещ\nОпр = &lt;/ Метка”:” /&gt; Переменная “=” Цел\nВещ = Цел “.” Цел\n...\nСостовляющие:\n·      терминалы\n·      нетерминалы\n·      спец символы\n Терминалы – основа создаваемого проблемно-ориентированного ЯП, их выбор (о необходимости отличия терминалов друг от друга, примеры).\n Нетерминалы – вспомогательный инструмент формального описания языка (о необходимости также создавать данные элементы максимально отличными друг от друга).\n Специальные символы – их соответствие основным инструментам программирования. Методический пример описания проблемно-ориентированного ЯП с помощью БНФ.\nТерминалы даются в кавычках. Терминалы неизменны\nОписание специальных символов { ... “разд” ... ! [] &lt;/ /&gt;} на данном примере\nНетерминалы могут быть во-первых – любыми. во-вторых, и использовать в разных вариантах\nОднозначность БНФ:\n·      Все нетерминалы получаются путем выражения через терминалы.\n·      Все нетерминалы встречаются как слева, так и справа, кроме корней терминала.\n32. Терминалы.\nОсновная составляющая формы Бэкуса-Наура (терминалы, нетерминалы, специальные символы)\nБНФ – это то, что мы делали в прошлом семаке\nЯзык = “Вegin” Звено...Звено Опр “;” ... Опр “End”\nЗвено = [“First” ! “Second”] Вещ “,” ... Вещ\nОпр = &lt;/ Метка”:” /&gt; Переменная “=” Цел\nОсобенности:\n·      Терминалы даются в кавычках.\n·      Терминалы неизменны.\n·      Все нетерминаты (путем подстановок) выражаются через терминалы.\n·      Терминалы – слова входного языка.\n·      Терминалы являются основой создаваемого проблемно-ориентированного ЯП\n33. Нетерминалы.\nОсновная составляющая формы Бэкуса-Наура (терминалы, нетерминалы, специальные символы)\nБНФ – это то, что мы делали в прошлом семаке\nЯзык = “Вegin” Звено...Звено Опр “;” ... Опр “End”\nЗвено = [“First” ! “Second”] Вещ “,” ... Вещ\nОпр = &lt;/ Метка”:” /&gt; Переменная “=” Цел\nОсобенности:\n·      Нетерминалы – промежуточные слова. Нетерминалы, по сути, вспомогательный инструмент формального описания языка\n·      Терминалы неизменны, а нетерминалы могут быть любыми и использовать в разных вариантах. Все нетерминаты (путем подстановок) выражаются через терминалы.\n·      Все нетерминалы стоят как слева, так и справа (кроме одного некорневого нетерминала)\n1) Опр = &lt;/ Метка “:” /&gt; Переменная “=” Цел\nМетка = Цел\n2) Опр = &lt;/ Цел “:” /&gt; Переменная “=” Цел\n34. Диагностика транслятора осуществляется.\nДиагностика транслятора. Основная ценность транслирующего средства – нахождение любой ошибки в тексте на входном языке. Для этого (в качестве “ловушки”) используется дерево разбора, благодаря которому исходный текст расчленяется на отдельные составляющие\nДиагностика должна:\n·      Адекватное указание ошибки. Диагностические сообщения должны нести в себе конкретный характер\n·      В тех случаях, когда существует некоторая неоднозначность (можно указать два или три варианта ошибки), необходимо перечислять все варианты.\n·      Алгоритм работы до первой ошибки вполне приемлем при реализации проблемно-ориентированного ЯП. Упор делается на точное диагностирование ошибки.\n35. Лексический анализатор.\nЛексический анализ («токенизация») — процесс аналитического разбора входной последовательности символов на распознанные группы — лексемы, с целью получения на выходе идентифицированных последовательностей, называемых «токенами» (подобно группировке букв в словах). В простых случаях понятия «лексема» и «токен» идентичны, но более сложные токенизаторы дополнительно классифицируют лексемы по различным типам («идентификатор, оператор», «часть речи» и т. п.).\nЛексический анализ используется в компиляторах и интерпретаторах исходного кода языков программирования, и в различных парсерах слов естественных языков.\nКак правило, лексический анализ производится с точки зрения определённого формального языка или набора языков.\n36. Вход и выход лексического анализатора.\nЛексический анализ («токенизация») — процесс аналитического разбора входной последовательности символов на распознанные группы — лексемы, с целью получения на выходе идентифицированных последовательностей, называемых «токенами» (подобно группировке букв в словах).\n·      на входе тексты на исходном проблемно-ориентированном языке\n·      на выходе – лексемы\nТрадиционно принято организовывать процесс лексического анализа, рассматривая входную последовательность символов как поток символов.\n37. Основные задачи, решаемые лексическим анализатором.\nЛексический анализ («токенизация») — процесс аналитического разбора входной последовательности символов на распознанные группы — лексемы, с целью получения на выходе идентифицированных последовательностей, называемых «токенами»\nВходной массив данных имеет смешанную текстово-цифровую информацию. С этим работать трудно. Нужно все привести к какой-либо единой форме. А дальше привести его к цифровому виду.\nТаким образом, столь «разношерстную» информацию удается привести к единой цифровой форме, а также все полученные элементы (лексемы) имеют одинаковую длину.\nЛексический анализатор – первый проход транслирующего средства по входному тексту. Другими словами, этот анализатор – приведение текста к единому формату, с которых значительно удобнее работать, нежели со входным текстом\n38. Лексические ошибки.\nЛексический анализ («токенизация») — процесс аналитического разбора входной последовательности символов на распознанные группы — лексемы, с целью получения на выходе идентифицированных последовательностей, называемых «токенами»\nВ ходе лектического анализа могут находится лексические ошибки. Лексические ошибки – неправильное написание слов. К примеру: система Microsoft Word (подчеркивание красным)\nНаиболее распространенные лексические ошибки:\n·      неправильная буква в слове,\n·      отсутствует одна буква,\n·      одна лишняя буква,\n·      две рядом стоящие буквы переставлены в тексте.\n39. Наиболее распространенные виды лексических ошибок (в словах)\nНаиболее распространенные лексические ошибки:\n·      неправильная буква в слове,\n·      отсутствует одна буква,\n·      одна лишняя буква,\n·      две рядом стоящие буквы переставлены в тексте.\n40. а) неправильная буква, б) пропущена буква, в) повторена буква, г) лишняя буква, д) две рядом стоящие буквы переставлены местами\nЛексические ошибки – неправильное написание слов. Положительный пример: система WORD (подчеркивание красным).\nЛексические ошибки: четыре наиболее распространенные:\n·      неправильная буква в слове;\n·      отсутствует одна буква;\n·      одна лишняя буква;\n·      две рядом стоящие буквы переставлены в тексте.\nВозможность их исправления в автоматизированном режиме\n41.Из скольких частей состоит лексема?\nЛексема может, например, состоять из двух байтов. Первая часть лексемы показывает «Тип» данной части текста, например: 1 – служебное слово; 2 – целое число 3 – специальный символ и т.д. Во второй части лексемы «Содержание», например, если это служебное слово, то 1 - “Begin”, 2 - “End” и т.п. Таким образом, столь «разношерстную» информацию удается привести к единой форме (кстати, цифровой), а также все полученные элементы (лексемы) имеют одинаковую длину.\n\nЛексема – последовательность допустимых символов ЯП, имеющая смысл для транслятора.\nСуществует 5 видов лексем:\n·      идентификаторы (имена, служат для того чтобы обращаться к программным объектам и различать их); Пример: hacker, Hacker и hAcKeR  – 3 разных имени;\n·      ключевые слова (зарезервированные идентификаторы, которые имеют специальное значение для компилятора); Пример: if, new, break, float)\n·      знаки операций (один или более символов, определяющих действие над операндами); Пример: +, -, ==, != , &lt;=, &gt;=,  +=\n·      разделители; Примеры разделителей: скобки, точка, запятая.\n·      константы (литералы, неизменяемые величины). Пример: true, false, null\n42.Два основных свойства лексем.\n2 правила лексемы: одинаковая длина и однородная цифровая информация.\nЛексема может, например, состоять из двух байтов.\nПервая часть лексемы показывает «Тип» данной части текста, например: 1 – служебное слово; 2 – целое число 3 – специальный символ и т.д. Во второй части лексемы «Содержание», например, если это служебное слово, то 1 – “Begin”, 2 – “End” и т.п.\nТаким образом, любую информацию удается привести к единой форме (кстати, цифровой), а также все полученные элементы (лексемы) имеют одинаковую длину.\n43.На вход лексического анализатора поступают:\nНа входе лексического анализатора – текст на входном языке\n44.На выходе лексического анализатора получаем:\nНа выходе – набор лексем(последовательность допустимых символов).\n45.Лексический анализатор\nЛексический анализатор - процесс аналитического разбора входной последовательности символов с целью получения на выходе другой последовательности символов (например, перевод сторки в число). При этом, группа символов входной последовательности, идентифицируемая на выходе процесса как последовательность допустимых символов (лексема), то есть в процессе лексического анализа производится распознавание и выделение лексем из входной последовательности символов.\nНа входе – тексты на входном языке. На выходе – лексем (последовательность допустимых символов). Анализирующая часть – поиск ошибок. Генерирующая часть – создание лексем.\n46.На вход синтаксического анализатора поступают:\nНа входе синтаксического анализатора – лексемы\n47.На выходе синтаксического анализатора получаем:\nНа выходе – набор промежуточных таблиц.\n48.Вход и выход синтаксического анализатора:\nНа входе – лексемы.\nНа выходе – промежуточные таблицы.\nАнализирующая часть – поиск ошибок.\nГенерирующая часть – формирование текстов на выходном языке\n49.Синтаксический анализатор\nСинтаксический анализатор — это программа или часть программы, выполняющая синтаксический анализ. В ходе синтаксического анализа исходный текст преобразуется в структуру данных, обычно — в дерево, которое отражает синтаксическую структуру входной последовательности и хорошо подходит для дальнейшей обработки. Как правило, результатом синтаксического анализа является синтаксическое строение предложения, представленное либо в виде дерева\n50.Синтаксические ошибки.\nСинтаксические ошибки – ошибки в конструкциях используемого ЯП. Т.е., входной текст не соответствует правилам написания входного языка.\n51.Что такое синтаксически-управляемый перевод?\nСинтаксический управляемый перевод – соответствие между записью в БНФ (Форма Бэкуса — Наура) и ее графическим отображением.\nПример:\nЯзык = “Начало” Множества Операторы “Конец”\nМножества = Множ “;” . . . Множ.\nОператоры = Опер . . . Опер\n\n52.Какой вариант рекурсии запрещен при применении метода рекурсивного спуска?\nРекурсия:\n\nпрямая s=s+xi\nкосвенная . . .\n\nМетод рекурсивного спуска - вложенные скобки (пр ч)-сколько угодно раз\nвариант появления новых ветвей в дереве разбора\nСкорее всего ответ – Многопрограммность – количество проходов по входному тексту. 1) Иду по входной строке, на выходе сразу же формирую выходную строку.2) Иду по входной строке – формирую лексемы, выбрасывая комментарии, или для начала выброшу комментарии, затем сформирую лексемы.\nМетод рекурсивного спуска (вариант появления новых ветвей в дереве разбора)\nРекурсия — это такой способ организации вспомогательного алгоритма (подпрограммы), при котором эта подпрограмма (процедура или функция) в ходе выполнения ее операторов обращается сама к себе.\n53.Какой из распознавателей (восходящий, нисходящий) чаще используется?\nНисходящие распознаватели более логичны. Распознаватели – распознает поток информации. Нисходящие распознаватели – сверху вниз по дереву разбора. Восходящие распознаватели – снизу вверх по дереву разбора.\n54.Нисходящий распознаватель осуществляет:\nНисходящие распознаватели – сверху вниз по дереву разбора. Нисходящие распознаватели обрабатывают правила сверху вниз, верхние правила раньше нижних\n55.Восходящий распознаватель осуществляет:\nВосходящие распознаватели – снизу вверх по дереву разбора. Восходящие анализаторы используют нижние правила раньше тех, что расположены выше.\n56.Синтаксически-управляемый перевод\nСм. Пункт 51\n57.Что означает словосочетание “слева - направо”?\nпо тексту\nвходная строка анализируется слева направо (left to right),\nи при этом строится её левосторонний вывод (leftmost derivation).\nНазвание LL произошло от слова Left, поскольку анализатор просматривает входную цепочку слева-направо, и слова Leftmost, поскольку он обнаруживает появление правила по одному или группе символов, образующих левый край цепочки. На практике наибольшее применение имеет класс LL(1) грамматик, для которых детерминированный распознаватель работает по одному входному символу, расположенному в текущей позиции.\n58.Что означает словосочетание “сверху-вниз”?\nпо дереву разбора с крупных\nНисходящие распознаватели обрабатывают правила сверху вниз, верхние правила раньше нижних.\nПодход “сверху вниз” использует высокоуровневое определение проблемы и подразделяет ее на подзадачи, которые затем выполняются рекурсивно, пока не будут разбиты на части, которые очевидны и просты в кодировании. Это часто ассоциируется со стилем программирования “функциональная декомпозиция”, но в этом нет необходимости.\n59.Что означает словосочетание “снизу-вверх”?\nпо дереву разбора с мелких [редкий тип]\nВосходящие анализаторы используют нижние правила раньше тех, что расположены выше.\nПрограммирование “снизу вверх”, или восходящее программирование – это методика разработки программ, начинающаяся с разработки подпрограмм (процедур, функций), в то время когда проработка общей схемы не закончилась. Является противоположной методике программирования «сверху вниз».\nАвтомат, выполняющий операцию свертки, в отличие от нисходящего распознавателя, не строит в магазине вывод цепочки, начиная с аксиомы грамматики, который соответствует построению синтаксического дерева цепочки “сверху - вниз”, а выполняет сворачивание символов, записанных в магазин. Такой порядок сворачивания символов, записанных в магазин, соответствует правому выводу цепочки, выполняемому “снизу - вверх”. Это обстоятельство объясняет, почему такие распознаватели называются восходящими. Подобный распознаватель должен учитывать при переходе не один символ, расположенный в вершине магазина, а цепочку символов.\nВ программировании “снизу вверх” вы определяете инструменты более низкого уровня, которые вы можете создать, чтобы они стали более крупной программой.\n60-65. Последовательность (приоритет) выполнения операций арифметического выражения, включающего в себя…\nПОЛНАЯ последовательность выполнения арифметических операций:\n·      Скобки;\n·      Функции;\n·      Логические операции (сначала “НЕ”, затем “И” и “ИЛИ”);\n·      Степенные операции;\n·      Мультипликативные операции (*, /);\n·      Аддитивные операции (+, -).\n66. Реализация вложенных скобок осуществляется с помощью\nОператор = Переменная “=” Правая часть.\nПравая часть = &lt;/ “-” /&gt; Блок Зн1... Блок\nЗн1 = «+» ! «-»\n…\nЭлемент = Цел ! Вещ ! “(” Правая часть “)”\nС помощью “(” Правая часть “)” можно осуществлять вложенность скобок с любой глубиной\n67. Реализация скобок с ограниченной вложенностью описывается\nОператор = Переменная “=” Правая часть.\nПравая часть = &lt;/ “-” /&gt; Блок Зн1... Блок\nЗн1 = «+» ! «-»\n…\nЭлемент = Цел ! Вещ ! “(” Правая часть “)”\nС помощью “(” Правая часть “)” k&lt;=4 можно осуществлять вложенность скобок с глубиной 4\n68. Метод рекурсивного спуска\nМетод рекурсивного спуска (метод синтаксических подпрограмм) основан на том, что структура алгоритма часто повторяет структуру читаемых им данных. Повторяющемуся фрагменту данных в алгоритме соответствует цикл, а вариантам представления информации – ветвление.\nВ методе рекурсивного спуска транслятор или другая программа анализа текста представляется в виде набора подпрограмм, каждая из которых читает и обрабатывает в тексте свою конструкцию и вызывает (в том числе рекурсивно) соответствующие подпрограммы для анализа вложенных в нее конструкций.\nОператор = Переменная “=” Правая часть.\nПравая часть = &lt;/ “-” /&gt; Блок Зн1... Блок\nЗн1 = «+» ! «-»\n…\nЭлемент = Цел ! Вещ ! “(” Правая часть “)”\nГрамматика примет вид:\nвыражение ::= слагаемое [{+ | -} слагаемое] …\nслагаемое ::= число\nчисло ::= цифра …\nцифра ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\nМетод рекурсивного спуска реализует разбор цепочки сверху вниз следующим образом. Для каждого нетерминального символа грамматики создается своя процедура, носящая его имя. Задача этой процедуры – начиная с указанного места исходной цепочки, найти подцепочку, которая выводится из этого нетерминала. Если такую подцепочку считать не удается, то процедура завершает свою работу вызовом процедуры обработки ошибок, которая выдает сообщение о том, что цепочка не принадлежит языку грамматики и останавливает разбор. Если подцепочку удалось найти, то работа процедуры считается нормально завершенной и осуществляется возврат в точку вызова. Тело каждой такой процедуры составляется непосредственно по правилам вывода соответствующего нетерминала, при этом терминалы распознаются самой процедурой, а нетерминалам соответствуют вызовы процедур, носящих их имена.\n69. Использование готового программного обеспечения из фондов алгоритмов и программ\nПрименявшиеся во 2-й половине ХХ века универсальные ЯП:\nа) ALGOL 60 (Algorithmic Language). Один из первых универсальных ЯП высокого уровня. Разработан в 1958 – 1960 гг. Оказал значительное влияние на все разработанные впоследствии ЯП высокого уровня.\nб) FORTRAN (Formula Translator). Получил широкое практическое применение. Создан с 1954 по 1957 год. ПО на этом языке доступно в исходных кодах, хорошо документировано, отлажено и весьма эффективно.\nв) PL/1 (Program Language No 1). Язык включал с себя “алгольную структуру”, вычислительные способности FORTRANа и обработку текстовой информации языка COBOL. Язык совмещен из нескольких частей, а не создан по единой концепции. Язык получился большой и малоуправляемый.\n70. Совместное программирование, использование программного обеспечения своих коллег\nШаги к совместному программированию:\nа) Выбор единого интерфейса. Переход на единое ПО, в которых отдельные модули принадлежат разным исполнителям.\nб) Использование одинаковых переменных и меток. Переход на программирование “макрокомандами” (набор операторов, который используется постоянно для решения похожих задач) каждого из партнеров. Формирования каждым партнером своего набора макрокоманд. Сравнение наборов и формирование единого набора макрокоманд для партнеров, работающих совместно.\n71. Принципы построения перекодировщиков\nПерекодировщик – транслятор без анализирующей части, у него только генерирующая часть.\n\nПри реализации перекодировщика можно перейти от исходного языка к графическому представлению, и от графического представления уже к другому языку.\n72. Б/с программы, как связующее звено между текстами на различных языках программирования\nХз, что тут говорить, в лекциях ничего. Скорее всего надо сказать, что напротив с каждым элементом б/с должны быть соответствующие строчки кода. По аналогии как делали домашку\n73. Перевод: Паскаль – Си\n\n1)    Совмещение блоков программы на Паскале с элементами графического представления.\n2)    Максимальное сохранение смысловой составляющей в программе (переменные, метки и т.п.).\n3)    Построение по элементам графического представления соответствующих блоков на языке Си.\nПостроение графического описания дает возможность проще понять общую структуру программы и уже на ее основе строить текст на другом ЯП. После получения блок-схемы по ней строится программа на языке Си. Сначала: переводятся основные конструкции: заголовок, циклическая операция, ветвление. Далее переход к реализации менее значимых операций.\nПредлагается XML-шаблон для перевода конструкций цикла (с предусловием и постусловием) на языке Паскаль:\n·      в вариант графического представления;\n·      в вариант на языке Си.\n74. Перевод: Си – Паскаль\n1)    Совмещение блоков программы на Си с элементами графического представления.\n2)    Максимальное сохранение смысловой составляющей в программе (переменные, метки и т.п.).\n3)    Построение по элементам графического представления соответствующих блоков на языке Паскаль.\nПостроение графического описания дает возможность проще понять общую структуру программы и уже на ее основе строить текст на другом ЯП. После получения блок-схемы по ней строится программа на языке Паскаль. Сначала: переводятся основные конструкции: заголовок, циклическая операция, ветвление. Далее переход к реализации менее значимых операций.\nПредлагается XML-шаблон для перевода конструкций цикла (с предусловием и постусловием) на языке Си:\n·      в вариант графического представления;\n·      в вариант на языке Паскаль.\n75. Конечные автоматы\nКонечные автоматы – модель дискретного устройства, имеющего один вход, один выход и в каждый момент времени находящегося в одном состоянии из множества возможных. Можно представить в виде графа или таблицы.\nГраф переходов — графическое представление множества состояний и функции переходов. Представляет собой размеченный ориентированный граф, вершины которого — состояния конечного автомата, дуги — переходы из одного состояния в другое, а метки дуг — символы, по которым осуществляется переход из одного состояния в другое. Если переход из состояния q1 в q2 может быть осуществлен по одному из нескольких символов, то все они должны быть надписаны над дугой диаграммы.\nТаблица переходов — табличное представление. Обычно в такой таблице каждой строке соответствует одно состояние, а столбцу — один допустимый входной символ. В ячейке на пересечении строки и столбца записывается состояние, в которое должен перейти автомат, если в данном состоянии он считал данный входной символ.\nПо характеру отсчёта дискретного времени автоматы делятся на синхронные и асинхронные. В синхронных моменты времени, в которые автомат считывает входные сигналы, определяются принудительно синхронизирующими сигналами. Асинхронный считывает входной сигнал непрерывно.\n76. Автомат Мура, текстовое представление\nКонечный автомат, выходное значение сигнала в котором зависит лишь от текущего состояния данного автомата, и не зависит напрямую, в отличие от автомата Мили, от входных значений.\nМожет быть определён как кортеж из 6 элементов:\n·      множество внутренних состояний S (внутренний алфавит);\n·      начальное состояние s0;\n·      множество входных сигналов X (входной алфавит);\n·      множество выходных сигналов Y (выходной алфавит);\n·      функция переходов Ф : S x X → S;\n·      функция вывода G : S → Y.\n77. Автомат Мура, представление в виде графа\n\n78. Автомат Мили, текстовое представление\nКонечный автомат, выходная последовательность которого (в отличие от автомата Мура) зависит от состояния автомата и входных сигналов. Это означает, что в графе состояний каждому ребру соответствует некоторое значение (выходной символ). В вершины графа автомата Мили записываются выходящие сигналы, а дугам графа приписывают условие перехода из одного состояния в другое, а также входящие сигналы.\nАвтомат Мура – совокупность A = (S , X , Y , δ , λ , S0), где\n·      S – конечное непустое множество состояний автомата;\n·      Х – конечное непустое множество входных символов;\n·      Y – конечное непустое множество выходных символов;\n·      δ : S x X → S – функция переходов, отображающих пары состояние / входной символ на соответствующее следующее состояние;\n·      λ : S x X → Y – функция выходов, отображающая пары состояние / входной символ на соответствующий выходной символ;\n·      S0 ϵ S – начальное состояние.\n79. Автомат Мили, представление в виде графа.\n\n80. Отладка адаптируемого программного обеспечения\nОтладка – этап разработки ПО, на котором обнаруживают, локализуют и устраняют ошибки. Итеративный процесс обнаружения и исправления ошибок, обычно состоящий из 4 этапов: выявление ошибки, локализация ошибки в тексте программы, установление причины ошибки, исправления ошибки.\nИспользование в полной мере принципа “промежуточной печати”. Установка вывода промежуточной печати как в результирующей программе, так и в исходной программе. Сравнение результатов на каждом этапе работы программы.\n·      после математических вычислений (проверка значений всех переменных).\n·      пометка ветвей операторов условного перехода (по какой ветке пошло вычисление.\n·      сообщение о каждой пройденной итерации цикла.\n·      распечатка всех переменных, передаваемых в подпрограмму (функцию).\n·      распечатка всех переменных, поступивших в подпрограмму (функцию);\n81. Тестирование адаптируемого программного обеспечения\nТестирование ПО – процесс исследования, испытания создаваемого ПО, имеющий своей целью проверку соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов.\n82. CASE- технологии\nCASE-технология представляет собой методологию проектирования ИС, а также набор инструментальных средств, позволяющих в наглядной форме моделировать предметную область.\nCASE-технология включает в себя оригинальный вариант графического представления информации.\nКаждая техническая операция (по центру) имеет следующую структуру:\n·      Слева (основные): исходные данные в стандартном представлении (документы, рабочие материалы, результаты предыдущей операции);\n·      Сверху (вспомогательные): методические материалы, инструкции, нормативы, и стандарты, критерии оценки результатов;\n·      Снизу (вспомогательные): сведения об исполнителях, программных и технических средствах;\n·      Справа (выходная информация): результаты в стандартном представлении."
  }
]